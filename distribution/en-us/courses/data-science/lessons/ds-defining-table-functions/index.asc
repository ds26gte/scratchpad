[.LessonPlan]
[.pyret]
= Defining Table Functions


Students continue practicing the Design Recipe, writing helper functions to filter rows and build columns in the Animals Dataset, using Methods.


[.left-header.preamble,cols="20a,80a",stripes=none]
|===

| Prerequisites | link:{pathwayrootdir}lessons/pass:[ds-table-methods]/index.shtml[Table Methods]

| 
++++
<script>
function showStandardsAlignment() {
  const selectTag = document.getElementsByClassName('standardsAlignmentSelect')[0];
  const options = selectTag && selectTag.options;
  const stdTables = document.getElementsByClassName('alignedStandards');
  const intro = document.getElementsByClassName('alignedStandardsIntro')[0];
  let introNeeded = true;
  for (let i = 0; i < stdTables.length; i++) {
    const stdTable = stdTables[i];
    stdTable.style.display = 'none';
  }
  for (let i = 0; i < options.length; i++) {
    const opt = options[i];
    if (opt.selected) {
      const optStd = opt.value;
      for (let j = 0; j < stdTables.length; j++) {
        const stdTable = stdTables[j];
        if (stdTable.classList.contains(optStd)) {
          stdTable.style.display = 'block';
          introNeeded = false;
        }
      }
    }
  }
  intro.style.display = introNeeded ? 'block' : 'none';
}
</script>
++++

Relevant Standards%CURRICULUMselect% class="standardsAlignmentSelect"  multiple onchange="showStandardsAlignment()" style="height: 150px"%BEGINCURRICULUMselect%%CURRICULUMoption% value="standards-OK"%BEGINCURRICULUMoption%OK%ENDCURRICULUMoption%%CURRICULUMoption% value="standards-K12CS"%BEGINCURRICULUMoption%K12CS%ENDCURRICULUMoption%%CURRICULUMoption% value="standards-CSTA"%BEGINCURRICULUMoption%CSTA%ENDCURRICULUMoption%%CURRICULUMoption% value="standards-NGSS"%BEGINCURRICULUMoption%NGSS%ENDCURRICULUMoption%%ENDCURRICULUMselect%

|

include::./pathway-standards.asc[]

| Lesson Goals
| Students will be able to...

* write custom helper functions to filter the animals table
* write custom helper functions to build on the animals table

| Student-facing Lesson Goals
|

* Let's practice writing functions to filter and expand our tables.

| Materials
|
* Lesson Slides (link:pass:[https://docs.google.com/presentation/d/1axaJ184_1dFnHLkJd3kifWoadd8LWbfUitstW2kpRvo/][Google Slides, window="_blank"])
* Computer for each student (or pair), with access to the internet
* link:{pathwayrootdir}/workbook/workbook.pdf[Student workbook], and something to write with
* All students should log into link:pass:[https://code.pyret.org][CPO, window="_blank"] and open the "Table Methods Starter File" they saved from the prior lesson. If they don't have the file, they can link:pass:[https://code.pyret.org/editor#share=1Fm3bSkeWZ5f4VwZ24TtOkZ3Pu0CPkJT2][open a new one, window="_blank"]

| Preparation
|
* Make sure all materials have been gathered
* Decide how students will be grouped in pairs

| Supplemental Resources
|

include::xtra/lang-prereq.asc[]
|===



include::./pathway-glossary.asc[]

[.lesson-section-1]
== Defining Lookup Functions %CURRICULUMspan% class="duration"%BEGINCURRICULUMspan%25 minutes%ENDCURRICULUMspan%

[.lesson-section-2]
=== Overview
Students continue practicing the Design Recipe, by writing functions to answer *Lookup Questions*.

[.lesson-section-2]
=== Launch

[.lesson-instruction]
Take two minutes to find all the fixed animals by hand. Turn to
link:pass:[../ds-intro/pages/animals-dataset.pdf][The Animals Dataset, window="_blank"], and walk down the table one row at a time, putting a check next to each animal that is fixed.

To do this activity, what kind of question were you asking of each animal? Was it a *Lookup*, *Compute*, or *Relate* question?

You went through the table one row at a time, and for *each row* you did a lookup on the `fixed` column.

[.lesson-instruction]
Have students type the code that will look up if `animalX` is fixed or not, then do the same with `animalY`. Suppose we wanted to do this for every animal in the table? This seems really repetitive, doesn’t it? We would keep typing the same thing over and over, but all that’s really changing is the animal. Wouldn’t it be great if Pyret had a function called `lookup-fixed`, that would do this for us?

Fortunately, we already know how to define functions using the Design Recipe!

[.lesson-instruction]
Turn to link:{pathwayrootdir}pass:[lessons/ds-defining-table-functions/pages/design-recipe-1.html][The Design Recipe (Page 28), window="_blank"] in your Student Workbook.

[.lesson-point]
Step 1: Contract and Purpose

The first thing we do is write a Contract for this function. You already know a lot about contracts: they tell us the Name, Domain and Range of the function. Our function is named lookup-fixed, and it consumes a row from the animals table. It looks up the value in the fixed column, which will always be a Boolean. A Purpose Statement is a description of what the function does:

----
# lookup-fixed :: (r :: Row) -> Boolean
# Consumes an animal, and lookup the value in the fixed column
----

Since the contract and purpose statement are notes for humans, we add the # symbol at the front of the line to turn it into a comment. Note that we used "lookup" in the purpose statement!

Be sure to check students’ contracts and purpose statements before having them move on.

[.lesson-point]
Step 2: Write Examples

Writing examples for Lookup questions is really simple: all we have to do is look up the correct value in the table, and then write the answer!

----
# lookup-fixed :: (r :: Row) -> Boolean
# Consumes an animal, and looks up the value in the fixed column
examples:
  lookup-fixed(animalX) is true
  lookup-fixed(animalY) is false
end
----

[.lesson-point]
Step 3: Define the Function

When defining the function, we replace the answer with the lookup code.

----
# lookup-fixed :: (animal :: Row) -> Boolean
# Consumes an animal, and looks up the value in the fixed column
examples:
  lookup-fixed(animalX) is true
  lookup-fixed(animalY) is false
end
fun lookup-fixed(r): r["fixed"]
end
----

[.lesson-section-2]
=== Investigate
For practice, try using the Design Recipe to define another lookup function.

[.lesson-instruction]
* Use the Design Recipe to solve the word problem at the bottom of link:{pathwayrootdir}pass:[lessons/ds-defining-table-functions/pages/design-recipe-1.html][The Design Recipe (Page 28), window="_blank"].
* Type in the Contract, Purpose Statement, Examples and Definition into the Definitions Area.
* Click “Run”, and make sure all your examples pass!
* Type `lookup-sex(animalX)` into the Interactions Area.

[.lesson-section-1]
== Defining Compute Functions %CURRICULUMspan% class="duration"%BEGINCURRICULUMspan%25 minutes%ENDCURRICULUMspan%

[.lesson-section-2]
=== Overview
Students define functions that answer *Compute Questions*, again practicing the Design Recipe.

[.lesson-section-2]
=== Launch
We've only been writing *Lookup Functions*: they consume a Row, look up one column from that row, and produce the result as-is. And as long as that row contains Boolean values, we can use that function with the `.filter` method.

But what if we want to filter by a Boolean expression? For example, what if we want to find out specifically whether or not an animal is a cat, or whether it’s young? Let’s walk through an example of a Compute Function using the Design Recipe, by turning to link:{pathwayrootdir}pass:[lessons/ds-defining-table-functions/pages/design-recipe-2.html][The Design Recipe (Page 29), window="_blank"].

Suppose we want to define a function called `is-cat`, which consumes a row from the `animals-table` and returns true if the animal is a cat.

* Is this a Lookup, Compute or Relate question?
* What is the name of this function? What are its Domain and Range?
* Is Sasha a cat? _What did you do to get that answer?_

To find out if an animal is a cat, we look-up the species column and check to see if that value is _equal_ to `"cat"`. Suppose `animalX` is a cat and `animalY` is a dog. What should our examples look like? *Remember: we replace any lookup with the actual value, and check to see if it is equal to `"cat"`.*

----
# is-cat :: (r :: Row) -> Boolean
# Consumes an animal, and compute whether the species is "cat"
examples:
  is-cat(animalX) is "cat" == "cat"
  is-cat(animalY) is "dog" == "cat"
end
----

[.lesson-instruction]
Write two examples for your defined animals. Make sure one is a cat and one isn’t!

As before, we’ll use the pattern from our examples to come up with our definition.

----
# is-cat :: (r :: Row) -> Boolean
# Consumes an animal, and compute whether the species is "cat"
examples:
  is-cat(animalX) is "cat" == "cat"
  is-cat(animalY) is "dog" == "cat"
end
fun is-cat(r): r["species"] == "cat"
end
----

Don't forget to include the lookup code in the function definition! We only write the actual value for our examples!

[.lesson-section-2]
=== Investigate
[.lesson-instruction]
* Type this definition -- and its examples! -- into the Definitions Area, then click “Run” and try using it to filter the `animals-table`.
* For practice, try solving the word problem for `is-young` at the bottom of link:{pathwayrootdir}pass:[lessons/ds-defining-table-functions/pages/design-recipe-2.html][The Design Recipe (Page 29), window="_blank"].

[.lesson-section-2]
=== Synthesize
Debrief as a class. Ask students to brainstorm some other functions they could write?

[.acknowledgment]
--
These materials were developed partly through support of the National Science Foundation, 
(awards 1042210, 1535276, 1648684, and 1738598). link:https://www.creativecommons.org/licenses/by-nc-nd/4.0/[image:{pathwayrootdir}../../lib/CCbadge.png[], window="_blank"]
Bootstrap:Data Science by Emmanuel Schanzer, Nancy Pfenning, Emma Youndtsmith, Jennifer Poole, Shriram Krishnamurthi, Joe Politz, Ben Lerner, Flannery Denny, and Dorai Sitaram with help from Eric Allatta and Joy Straub
is licensed under a
https://creativecommons.org/licenses/by-nc-nd/4.0/[Creative Commons 4.0 Unported License].
Based on a work at https://www.bootstrapworld.org[www.BootstrapWorld.org].
Permissions beyond the scope of this license may be available by contacting
mailto:schanzer@BootstrapWorld.org[schanzer@BootstrapWorld.org]. 
--
