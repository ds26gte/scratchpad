<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="generator" content="Asciidoctor 2.0.10">
<title>Defining Functions</title>
<link rel="stylesheet" href="./../../../../lib/curriculum.css">
    <link rel="stylesheet" href="../../../../lib/codemirror.css" />
    <script type="text/javascript" src="../../../../lib/codemirror.js"></script>
    <script type="text/javascript" src="../../../../lib/runmode.js"></script>
    <script type="text/javascript" src="../../../../lib/scheme2.js"></script>
    <script type="text/javascript" src="../../../../lib/pyret-mode.js"></script>
    <script type="text/javascript" src="../../../../lib/bootstraplesson.js"></script>

  <script>window.___gcfg = {
  parsetags: 'explicit'
  };
  </script>
  <script src="https://apis.google.com/js/platform.js" async defer></script>
  <script>function renderSaveToDrive() {
    var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    gapi.savetodrive.render('savetodrive-div', {
    src:(window.location.href.match(/\/$/)?(window.location.href+'index-gdrive-import.html'):(window.location.href.replace(/([^\/]+)\.([^.\/]+)$/, '$1-gdrive-import.html'))),
    filename:"Defining Functions",
    sitename:"Bootstrap, Brown University"
  });
  if(isSafari){
    var warning = document.createElement("div");
    warning.id = "safariWarning";
    warning.innerHTML = "You appear to be using Safari, which interferes with Google's Save-to-Drive button. You can fix it by going to Preferences, clicking 'Privacy', and making sure that 'Prevent cross-site tracking' is <b>not</b> checked."
    var button = document.getElementById("savetodrive-div");
    button.parentNode.insertBefore(warning, warning.nextSibling);
  }
}
</script>
</head>
<body class="article LessonPlan pyret" onload="renderSaveToDrive()">
<!--#include virtual="/menubar.ssi"-->
<!-- Analytics -->
<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-46088504-1', 'bootstrapworld.org');
ga('send', 'pageview');

</script>
<div id="body" onload="renderSaveToDrive()">
<div id="header">
<h1>Defining Functions</h1>

  <div id="savetodrive-div"></div>

</div>
<div id="content">
<div id="preamble_disabled">
<div class="sectionbody">
<div class="paragraph">
<p>Students learn a structured approach to problem solving called the “Design Recipe”. They then use these functions to create images, and learn how to apply them to enhance their scatterplots.</p>
</div>
<table class="tableblock frame-all grid-all stripes-none stretch left-header preamble">
<colgroup>
<col style="width: 20%;">
<col style="width: 80%;">
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Prerequisites</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p><a href="../../lessons/ds-applying-functions/index.shtml">Applying Functions</a></p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div class="content"><script>
function showStandardsAlignment() {
  const selectTag = document.getElementsByClassName('standardsAlignmentSelect')[0];
  const options = selectTag && selectTag.options;
  const stdTables = document.getElementsByClassName('alignedStandards');
  const intro = document.getElementsByClassName('alignedStandardsIntro')[0];
  let introNeeded = true;
  for (let i = 0; i < stdTables.length; i++) {
    const stdTable = stdTables[i];
    stdTable.style.display = 'none';
  }
  for (let i = 0; i < options.length; i++) {
    const opt = options[i];
    if (opt.selected) {
      const optStd = opt.value;
      for (let j = 0; j < stdTables.length; j++) {
        const stdTable = stdTables[j];
        if (stdTable.classList.contains(optStd)) {
          stdTable.style.display = 'block';
          introNeeded = false;
        }
      }
    }
  }
  intro.style.display = introNeeded ? 'block' : 'none';
}
</script>
<div class="paragraph">
<p>Relevant Standards<select class="standardsAlignmentSelect"  multiple onchange="showStandardsAlignment()" style="height: 150px"><option value="standards-OK">OK</option><option value="standards-K12CS">K12CS</option><option value="standards-CSTA">CSTA</option><option value="standards-NGSS">NGSS</option><option value="standards-CC-Math">CC-Math</option></select></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph alignedStandardsIntro">
<p><em>Select one or more standards from the menu on the left (⌘-click on Mac, Ctrl-click elsewhere).</em></p>
</div>
<div class="dlist alignedStandards standards-CC-Math standards-hierarchical-table">
<div class="title">Common Core Math Standards</div>
<dl>
<dt class="hdlist1">8.SP.A.1</dt>
<dd>
<p>Construct and interpret scatter plots for bivariate measurement data to investigate patterns of association between two quantities. Describe patterns such as clustering, outliers, positive or negative association, linear association, and nonlinear association.</p>
</dd>
<dt class="hdlist1">HSF.BF.A.1</dt>
<dd>
<p>Write a function that describes a relationship between two quantities.</p>
</dd>
</dl>
</div>
<div class="dlist alignedStandards standards-CSTA standards-hierarchical-table">
<div class="title">CSTA Standards</div>
<dl>
<dt class="hdlist1">2-AP-14</dt>
<dd>
<p>Create procedures with parameters to organize code and make it easier to reuse.</p>
</dd>
<dt class="hdlist1">2-AP-17</dt>
<dd>
<p>Systematically test and refine programs using a range of test cases</p>
</dd>
<dt class="hdlist1">2-AP-19</dt>
<dd>
<p>Document programs in order to make them easier to follow, test, and debug.</p>
</dd>
</dl>
</div>
<div class="dlist alignedStandards standards-K12CS standards-hierarchical-table">
<div class="title">K-12CS Standards</div>
<dl>
<dt class="hdlist1">6-8.Algorithms and Programming.Modularity</dt>
<dd>
<p>Programs use procedures to organize code, hide implementation details, and make code easier to reuse. Procedures can be repurposed in new programs. Defining parameters for procedures can generalize behavior and increase reusability.</p>
</dd>
<dt class="hdlist1">6-8.Algorithms and Programming.Variables</dt>
<dd>
<p>Programmers create variables to store data values of selected types. A meaningful identifier is assigned to each variable to access and perform operations on the value by name. Variables enable the flexibility to represent different situations, process different sets of data, and produce varying outputs.</p>
</dd>
<dt class="hdlist1">9-12.Algorithms and Programming.Modularity</dt>
<dd>
<p>Complex programs are designed as systems of interacting modules, each with a specific role, coordinating for a common overall purpose. These modules can be procedures within a program; combinations of data and procedures; or independent, but interrelated, programs. Modules allow for better management of complex tasks.</p>
</dd>
<dt class="hdlist1">P4</dt>
<dd>
<p>Developing and Using Abstractions</p>
</dd>
</dl>
</div>
<div class="dlist alignedStandards standards-NGSS standards-hierarchical-table">
<div class="title">Next-Gen Science Standards</div>
<dl>
<dt class="hdlist1">HS-SEP5-3</dt>
<dd>
<p>Apply techniques of algebra and functions to represent and solve scientific and engineering problems.</p>
</dd>
</dl>
</div>
<div class="dlist alignedStandards standards-OK standards-hierarchical-table">
<div class="title">Oklahoma Standards</div>
<dl>
<dt class="hdlist1">OK.8.AP.PD.02</dt>
<dd>
<p>Incorporate existing code, media, and libraries into original programs of increasing complexity and give attribution.</p>
</dd>
<dt class="hdlist1">OK.A1.F.1.3</dt>
<dd>
<p>Write linear functions, using function notation, to model real-world and mathematical situations.</p>
</dd>
</dl>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Lesson Goals</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Students will be able to&#8230;&#8203;</p>
</div>
<div class="ulist">
<ul>
<li>
<p>define one-argument functions that consume a Number and produce an Image</p>
</li>
<li>
<p>define one-argument functions that consume a String and produce an Image</p>
</li>
<li>
<p>define one-argument functions that consume a Row and produce an Image</p>
</li>
<li>
<p>create custom scatter plots, using functions they have defined</p>
</li>
<li>
<p>define one-argument functions that make Images from Numbers, Strings, and even Rows</p>
</li>
<li>
<p>create custom scatter plots using those functions</p>
</li>
</ul>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Student-facing Lesson Goals</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="ulist">
<ul>
<li>
<p>Let&#8217;s learn how to write our own functions in Pyret.</p>
</li>
</ul>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Materials</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="ulist">
<ul>
<li>
<p>Lesson Slides (<a href="https://docs.google.com/presentation/d/1qGfWcaI9dqNW71AUUJJZoR_w6JUqsWLSln4uh1NiBJA" target="_blank" rel="noopener">Google Slides</a>)</p>
</li>
<li>
<p>Computer for each student (or pair), with access to the internet</p>
</li>
<li>
<p><a href="../..//workbook/workbook.pdf">Student workbook</a>, and something to write with</p>
</li>
<li>
<p>All students should log into <a href="https://code.pyret.org" target="_blank" rel="noopener">CPO</a> and open the "Animals Starter File" they saved from the prior lesson. If they don&#8217;t have the file, they can <a href="https://code.pyret.org/editor#share=1ZupMVPWvVUOM0HCWyA7cRBghSLKxPWv1" target="_blank" rel="noopener">open a new one</a></p>
</li>
</ul>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Preparation</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="ulist">
<ul>
<li>
<p>Make sure all materials have been gathered</p>
</li>
<li>
<p>Decide how students will be grouped in pairs</p>
</li>
</ul>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Supplemental Resources</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Language Table</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><table class="tableblock frame-all grid-all stretch lang-features-table">
<colgroup>
<col style="width: 16.6666%;">
<col style="width: 66.6666%;">
<col style="width: 16.6668%;">
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Types</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Functions</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Values</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Number</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>num-sqrt, num-sqr</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>4, -1.2, 2/3</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>String</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>string-repeat, string-contains</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>"hello", "91"</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Boolean</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>==, &lt;, &lt;=, &gt;=, string-equal</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>true, false</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Image</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>triangle, circle, star, rectangle, ellipse, square, text, overlay, bar-chart, pie-chart, bar-chart-summarized, pie-chart-summarized</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>🔵🔺🔶</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Table</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>count, .row-n, .order-by, .filter, .build-column</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"></div></td>
</tr>
</tbody>
</table></div></td>
</tr>
</tbody>
</table>
<div class="dlist glossary">
<div class="title">Glossary</div>
<dl>
<dt class="hdlist1">design recipe</dt>
<dd>
<p>a sequence of steps that helps people document, test, and write functions</p>
</dd>
</dl>
</div>
</div>
</div>
<div class="sect1 lesson-section-1">
<h2 id="_defining_functions_over_numbers_duration_20_minutes_"><span class="section-link"><a href="#_defining_functions_over_numbers_duration_20_minutes_"><span class="section-link-symbol">&#128279;</span></a></span>Defining Functions over Numbers <span class="duration">20 minutes</span></h2>
<div class="sectionbody">
<div class="sect2 lesson-section-2">
<h3 id="_overview">Overview</h3>
<div class="paragraph">
<p>Students have learned to define <em>values</em> (e.g. - <code><tt class="pyret">name = "Maya"</tt></code>, <code><tt class="pyret">x = 5</tt></code>, etc). Students should have defined <code><tt class="pyret">animalA</tt></code> and <code><tt class="pyret">animalB</tt></code> to be two different rows in the animals table. If they haven&#8217;t, make sure they do this now.</p>
</div>
</div>
<div class="sect2 lesson-section-2">
<h3 id="_launch">Launch</h3>
<div class="paragraph">
<p>Suppose we want to make a solid, green triangle of size 10. What would we type? What if we wanted to make one of size 20? 25? 1000?</p>
</div>
<div class="listingblock">
<div class="content">
<pre><tt class="pyret">triangle(10, "solid", "green")
triangle(20, "solid", "green")
triangle(25, "solid", "green")
triangle(1000, "solid", "green")</tt></pre>
</div>
</div>
<div class="paragraph">
<p>This is a lot of redundant typing, when the only thing changing is the size of the triangle! It would be convenient to define a <em>shortcut</em>, which only needs the size. Suppose we call it <code><tt class="pyret">gt</tt></code> for short:</p>
</div>
<div class="listingblock">
<div class="content">
<pre><tt class="pyret">gt(10)
gt(20)
gt(25)
gt(1000)</tt></pre>
</div>
</div>
<div class="paragraph">
<p>We don&#8217;t need to tell <code><tt class="pyret">gt</tt></code> whether the shape is <code><tt class="pyret">"solid"</tt></code> or <code><tt class="pyret">"outline"</tt></code>, and we don&#8217;t need to tell it what color to use. We will define our shortcut so it already knows these things, and all it needs is the size. This is a lot like defining values, which we already know how to do. But values don&#8217;t change, so our triangles would always be the same size. Instead of defining values, we need to define <em>functions</em>.</p>
</div>
<div class="paragraph">
<p>To build our own functions, we’ll use a series of steps called the <span class="vocab">Design Recipe</span>. The Design Recipe is a way to think through the behavior of a function, to make sure we don’t make any mistakes with the animals that depend on us! The Design Recipe has three steps, and we’ll go through them together for our first function.</p>
</div>
<div class="paragraph lesson-instruction">
<p>Turn to <a href="../../lessons/ds-defining-functions/pages/design-recipe-1.html" target="_blank" rel="noopener">The Design Recipe (Page 23)</a> in your Student Workbook, and read the word problem at the top of the page.</p>
</div>
<div class="paragraph lesson-point">
<p>Step 1: Contract and Purpose</p>
</div>
<div class="paragraph">
<p>The first thing we do is write a Contract for this function. You already know a lot about contracts: they tell us the Name, Domain and Range of the function. Our function is named <code><tt class="pyret">gt</tt></code>, and it consumes a Number. It makes triangles, so the output will be an Image. A Purpose Statement is just a description of what the function does:</p>
</div>
<div class="listingblock">
<div class="content">
<pre><tt class="pyret"># gt :: (size :: Number) -&gt; Image
# Consumes a size, and produces a solid green triangle of that size.</tt></pre>
</div>
</div>
<div class="paragraph">
<p>Since the contract and purpose statement are notes for humans, we add the # symbol at the front of the line to turn them into comments.</p>
</div>
<div class="paragraph">
<p>Be sure to check students’ contracts and purpose statements before having them move on!</p>
</div>
<div class="paragraph lesson-point">
<p>Step 2: Write Examples</p>
</div>
<div class="paragraph">
<p>Examples are a way for us to tell the computer how our function should behave for a specific input. We can write as many examples as we want, but they must all be wrapped in an examples: block and an end statement. Examples start with the name of the function we’re writing, followed by an example input. Suppose we write <code><tt class="pyret">gt(10)</tt></code>. What work do we have to do, in order to produce the right shape as a result? What if we write <code><tt class="pyret">gt(20)</tt></code>?</p>
</div>
<div class="listingblock">
<div class="content">
<pre><tt class="pyret"># gt :: (size :: Number) -&gt; Image
# Consumes a size, and produces a solid green triangle of that size.
examples:
  gt(10) is triangle(10, "solid", "green")
  gt(10) is triangle(10, "solid", "green")
end</tt></pre>
</div>
</div>
<div class="paragraph lesson-point">
<p>Step 3: Define the Function</p>
</div>
<div class="paragraph">
<p>We start with the <code><tt class="pyret">fun</tt></code> keyword (short for “function”), followed by the name of our function and a set of parentheses. This is exactly how all of our examples started, too. But instead of writing <code><tt class="pyret">10</tt></code> or <code><tt class="pyret">20</tt></code>, we’ll use the label from our Domain. Then we add a colon (<code><tt class="pyret">:</tt></code>) in place of <code><tt class="pyret">is</tt></code>, and write out the work we did to get the answers for our examples. Finally, we finish with the <code><tt class="pyret">end</tt></code> keyword.</p>
</div>
<div class="listingblock">
<div class="content">
<pre><tt class="pyret"># gt :: (size :: Number) -&gt; Image
# Consumes a size, and produces a solid green triangle of that size.
examples:
  gt(10) is triangle(10, "solid", "green")
  gt(10) is triangle(10, "solid", "green")
end
fun gt(size):
  triangle(size, "solid", "green")
end</tt></pre>
</div>
</div>
</div>
<div class="sect2 lesson-section-2">
<h3 id="_investigate">Investigate</h3>
<div class="paragraph lesson-instruction">
<p>Type your function definition into the Definitions Area. Be sure to include the Contract, Purpose Statement, Examples <em>and</em> your Definition! Once you have typed everything in, click "Run" and evaluate <code><tt class="pyret">gt(10)</tt></code> in the Interactions Area. What did you get back?</p>
</div>
<div class="paragraph">
<p>Once we have defined a function, we can use it as our shortcut! This makes it easy to write simpler code, by moving the complexity into a function that can be tested and re-used whenever we like.</p>
</div>
<div class="ulist lesson-instruction">
<ul>
<li>
<p>Use the Design Recipe to solve the word problem at the bottom of <a href="../../lessons/ds-defining-functions/pages/design-recipe-1.html" target="_blank" rel="noopener">The Design Recipe (Page 23)</a>.</p>
</li>
<li>
<p>Type in the Contract, Purpose Statement, Examples and Definition into the Definitions Area.</p>
</li>
<li>
<p>Click “Run”, and make sure all your examples pass!</p>
</li>
<li>
<p>Type bc(20) into the Interactions Area. What happens?</p>
</li>
</ul>
</div>
</div>
<div class="sect2 lesson-section-2">
<h3 id="_synthesize">Synthesize</h3>
<div class="paragraph">
<p>Ask students what happens if they change one of the examples to be incorrect:
  gt(10) is triangle(99, "solid", "green")</p>
</div>
</div>
</div>
</div>
<div class="sect1 lesson-section-1">
<h2 id="_defining_functions_over_other_datatypes_duration_20_minutes_"><span class="section-link"><a href="#_defining_functions_over_other_datatypes_duration_20_minutes_"><span class="section-link-symbol">&#128279;</span></a></span>Defining Functions over Other Datatypes <span class="duration">20 minutes</span></h2>
<div class="sectionbody">
<div class="sect2 lesson-section-2">
<h3 id="_overview_2">Overview</h3>
<div class="paragraph">
<p>Students deepen their understanding of function definition and the Design Recipe, by solving different kinds of problems.</p>
</div>
</div>
<div class="sect2 lesson-section-2">
<h3 id="_launch_2">Launch</h3>
<div class="paragraph">
<p>Functions can consume values besides Numbers. For example, we might want to define a function called <code><tt class="pyret">sticker</tt></code> that consumes a <em>Color</em>, and draws a star of that color:</p>
</div>
<div class="listingblock">
<div class="content">
<pre><tt class="pyret">sticker("blue") is star(50, "solid", "blue")
sticker("yellow") is star(50, "solid", "yellow")</tt></pre>
</div>
</div>
<div class="paragraph">
<p>Or a function called <code><tt class="pyret">nametag</tt></code> that consumes a <em>Row</em> from the animals table, and draws that animal&#8217;s name in purple letters.</p>
</div>
<div class="listingblock">
<div class="content">
<pre><tt class="pyret">nametag(animalA) is text(animalA["name"], 10, "purple")
nametag(animalB) is text(animalB["name"], 10, "purple")</tt></pre>
</div>
</div>
</div>
<div class="sect2 lesson-section-2">
<h3 id="_investigate_2">Investigate</h3>
<div class="paragraph lesson-instruction">
<p>Turn to <a href="../../lessons/ds-defining-functions/pages/design-recipe-2.html" target="_blank" rel="noopener">The Design Recipe (Page 24)</a>, and use the Design Recipe to write both of these functions.</p>
</div>
</div>
</div>
</div>
<div class="sect1 lesson-section-1">
<h2 id="_custom_scatter_plot_images_duration_15_minutes_"><span class="section-link"><a href="#_custom_scatter_plot_images_duration_15_minutes_"><span class="section-link-symbol">&#128279;</span></a></span>Custom Scatter Plot Images <span class="duration">15 minutes</span></h2>
<div class="sectionbody">
<div class="sect2 lesson-section-2">
<h3 id="_overview_3">Overview</h3>
<div class="paragraph">
<p>Students discover <em>functions that consume other functions</em>, and compose a scatter plot function with one of the functions they&#8217;ve already defined.</p>
</div>
</div>
<div class="sect2 lesson-section-2">
<h3 id="_launch_3">Launch</h3>
<div class="paragraph">
<p>Students have used Pyret functions that use Numbers, Strings, Images, and even Tables and Rows. Now they&#8217;ve written functions of their own that work with these datatypes. However, Pyret functions can even use <em>other functions</em>! Have students at the Contract for <code><tt class="pyret">image-scatter-plot</tt></code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre><tt class="pyret"> image-scatter-plot :: (t :: Table, xs :: String, ys :: String, f :: (Row -&gt; Image)) -&gt; Image</tt></pre>
</div>
</div>
<div class="paragraph">
<p>This function looks a lot like the regular <code><tt class="pyret">scatter-plot</tt></code> function. It takes in a table, and the names of columns to use for x- and y-values. Take a closer look at the third input&#8230;&#8203;</p>
</div>
<div class="listingblock">
<div class="content">
<pre><tt class="pyret">...f :: (Row -&gt; Image)...</tt></pre>
</div>
</div>
<div class="paragraph">
<p><em>That looks like the contract for a function!</em> Indeed, the third input to <code><tt class="pyret">image-scatter-plot</tt></code> is named <code><tt class="pyret">f</tt></code>, which itself is a function that consumes Rows and produces Images. In fact, students have just defined a function that does exactly that!</p>
</div>
</div>
<div class="sect2 lesson-section-2">
<h3 id="_investigate_3">Investigate</h3>
<div class="ulist lesson-instruction">
<ul>
<li>
<p>Type <code><tt class="pyret">image-scatter-plot(animals-table, "pounds", "weeks", nametag)</tt></code> into the Interactions Area.</p>
</li>
<li>
<p>What did you get?</p>
</li>
<li>
<p>What other scatter plots could we create?</p>
</li>
</ul>
</div>
<div class="paragraph">
<p><strong>Note:</strong> the optional lesson <a href="../ds-if-expressions/index.shtml" target="_blank" rel="noopener">If Expressions</a> goes deeper into basic programming constructs, using <code><tt class="pyret">image-scatter-plot</tt></code> to motivate more complex (and exciting!) plots.</p>
</div>
</div>
<div class="sect2 lesson-section-2">
<h3 id="_synthesize_2">Synthesize</h3>
<div class="paragraph">
<p>Functions are powerful tools, for both mathematics and programming. They allow us to create reusable chunks of logic that can be tested to ensure correctness, and can be used over and over to solve different kinds of problems. A little later on, you&#8217;ll learn how to combine, or <em>compose</em> functions together, in order to handle more complex problems.</p>
</div>
</div>
</div>
</div>
<div class="sect1 lesson-section-1">
<h2 id="_additional_exercises"><span class="section-link"><a href="#_additional_exercises"><span class="section-link-symbol">&#128279;</span></a></span>Additional Exercises:</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p><a href="../../lessons/ds-defining-functions/pages/design-recipe-3.html" target="_blank" rel="noopener">The Design Recipe</a></p>
</li>
</ul>
</div>
<div class="openblock acknowledgment">
<div class="content">
<div class="paragraph">
<p>These materials were developed partly through support of the National Science Foundation,
(awards 1042210, 1535276, 1648684, and 1738598). <a href="https://www.creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener"><span class="image"><img src="../../../../lib/CCbadge.png" alt="CCbadge"></span></a>
Bootstrap:Data Science by Emmanuel Schanzer, Nancy Pfenning, Emma Youndtsmith, Jennifer Poole, Shriram Krishnamurthi, Joe Politz, Ben Lerner, Flannery Denny, and Dorai Sitaram with help from Eric Allatta and Joy Straub
is licensed under a
<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/">Creative Commons 4.0 Unported License</a>.
Based on a work at <a href="https://www.bootstrapworld.org">www.BootstrapWorld.org</a>.
Permissions beyond the scope of this license may be available by contacting
<a href="mailto:schanzer@BootstrapWorld.org">schanzer@BootstrapWorld.org</a>.</p>
</div>
</div>
</div>
</div>
</div>
</div>
<div id="footer">
<div id="footer-text">
Last updated 2020-08-19 20:34:23 -0400
</div>
</div>
</div>
</body>
</html>