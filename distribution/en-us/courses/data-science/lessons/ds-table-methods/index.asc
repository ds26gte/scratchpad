[.LessonPlan]
[.pyret]
= Table Methods


Students learn about _table methods_, which allow them to order, filter, and build columns to extend the animals table.


[.left-header.preamble,cols="20a,80a",stripes=none]
|===

| Prerequisites | link:{pathwayrootdir}lessons/pass:[ds-defining-functions]/index.shtml[Defining Functions]

| 
++++
<script>
function showStandardsAlignment() {
  const selectTag = document.getElementsByClassName('standardsAlignmentSelect')[0];
  const options = selectTag && selectTag.options;
  const stdTables = document.getElementsByClassName('alignedStandards');
  const intro = document.getElementsByClassName('alignedStandardsIntro')[0];
  let introNeeded = true;
  for (let i = 0; i < stdTables.length; i++) {
    const stdTable = stdTables[i];
    stdTable.style.display = 'none';
  }
  for (let i = 0; i < options.length; i++) {
    const opt = options[i];
    if (opt.selected) {
      const optStd = opt.value;
      for (let j = 0; j < stdTables.length; j++) {
        const stdTable = stdTables[j];
        if (stdTable.classList.contains(optStd)) {
          stdTable.style.display = 'block';
          introNeeded = false;
        }
      }
    }
  }
  intro.style.display = introNeeded ? 'block' : 'none';
}
</script>
++++

Relevant Standards%CURRICULUMselect% class="standardsAlignmentSelect"  multiple onchange="showStandardsAlignment()" style="height: 150px"%BEGINCURRICULUMselect%%CURRICULUMoption% value="standards-OK"%BEGINCURRICULUMoption%OK%ENDCURRICULUMoption%%CURRICULUMoption% value="standards-CSTA"%BEGINCURRICULUMoption%CSTA%ENDCURRICULUMoption%%CURRICULUMoption% value="standards-NGSS"%BEGINCURRICULUMoption%NGSS%ENDCURRICULUMoption%%ENDCURRICULUMselect%

|

include::./pathway-standards.asc[]

| Lesson Goals
| Students will be able to...

* order the Animals Dataset by a number of criteria
* filter the Animals Dataset by species, fixed status, and age

| Student-facing Lesson Goals
|

* Let’s learn how to start with one table and transform it into another.

| Materials
|
* Lesson Slides (link:pass:[https://docs.google.com/presentation/d/1N_B0npxLkwbQLGtCXSwDHxQJUHj5dFSislVNBftKZEc/][Google Slides, window="_blank"])
* "Function Purpose cards" which describe simple boolean functions to apply to students
* Computer for each student (or pair), with access to the internet
* link:{pathwayrootdir}/workbook/workbook.pdf[Student workbook], and something to write with
* All students should log into link:pass:[https://code.pyret.org][CPO, window="_blank"] and open the link:pass:[https://code.pyret.org/editor#share=1IWPbJK_hsxIGtbUJLz59tLeL_NE1p9FG&v=ebd213d][Table Methods Starter File, window="_blank"]
* One copy of link:pass:[pages/function-cards.html][Function Cards, window="_blank"] printed and cut.

| Preparation
|
* Make sure all materials have been gathered
* Decide how students will be grouped in pairs

| Supplemental Resources
|

include::xtra/lang-prereq.asc[]
|===



include::./pathway-glossary.asc[]

[.lesson-section-1]
== Review Function Definitions %CURRICULUMspan% class="duration"%BEGINCURRICULUMspan%15 minutes%ENDCURRICULUMspan%

[.lesson-section-2]
=== Overview
Students get some practice reading function definitions, and in the process they build knowledge that's needed later on in the lesson.

[.lesson-section-2]
=== Launch
Let's see how much you remember about function definitions! Load the link:pass:[https://code.pyret.org/editor#share=1IWPbJK_hsxIGtbUJLz59tLeL_NE1p9FG&v=ebd213d][Table Methods Starter File, window="_blank"], go to the File menu, and click "Save a Copy". 

[.lesson-section-2]
=== Investigate
[.lesson-instruction]
Students complete link:{pathwayrootdir}pass:[lessons/ds-table-methods/pages/reading-functions.html][Reading Function Definitions (Page 27), window="_blank"] in their student workbooks.

[.lesson-section-2]
=== Synthesize
Can students explain what each function does?

[.lesson-section-1]
== Ordering Tables %CURRICULUMspan% class="duration"%BEGINCURRICULUMspan%10 minutes%ENDCURRICULUMspan%

[.lesson-section-2]
=== Overview
Students learn a second table method, which allows them to sort rows in ascending or descending order, according to one column.

[.lesson-section-2]
=== Launch
Have students find the contract for `.order-by` in their contracts pages. The `.order-by` method consumes a String (the name of the column by which we want to order) and a Boolean (true for ascending, false for descending). But what does it produce?

[.lesson-section-2]
=== Investigate
[.lesson-instruction]
* Type `animals-table.order-by("name", true)` into the Interactions Area. What do you get?
* Type `animals-table.order-by("age", false)` into the Interactions Area. What do you get?
* Sort the animals table from heaviest-to-lightest.
* Sort the animals table alphabetically by species.
* Sort the animals table by how long it took for each animal to be adopted, in ascending order.

[.lesson-section-2]
=== Synthesize
Answer any questions students may have. Class discussion: what do `.order-by` and `.row-n` have in common? How are they different?

[.lesson-section-1]
== Filtering Tables %CURRICULUMspan% class="duration"%BEGINCURRICULUMspan%20 minutes%ENDCURRICULUMspan%

[.lesson-section-2]
=== Overview
Students learn how to _filter_ tables, by removing rows.

[.lesson-section-2]
=== Launch
Explain to students that you have "Function Cards", which describe the purpose statement of a function that consumes a Row from a table of students, and produces a Boolean (e.g. - "this student is wearing glasses"). Select a volunteer to be the "filter method", and have them _randomly choose_ a link:pass:[pages/function-cards.html][Function Card, window="_blank"], and make sure they read it without showing it to anyone else.

Have ~10 students line up in front of the classroom, and have the filter method go to each student and say "stay" or "sit" depending on whether their function would return true or false for that student. If they say "sit", the student sits down. If they say true, the student stays standing.

Ask the class: based on who sat and who stayed, _what function was on the card?_

[.lesson-point]
The `.filter` method takes a function, and produces a _new table_ containing only rows for which the function returns `true`.

Suppose we want to get a table of only animals that have been fixed? Have students find the contract for `.filter` in their contracts pages. The `.filter` method is taking in a _function_. What is the contract for that function? Where have we seen functions-taking-functions before?

[.lesson-section-2]
=== Investigate

[.lesson-instruction]
* In the Interactions Area, type `animals-table.filter(is-fixed)`. What did you get?
* What do you expect `animals-table` to produce, and why? Try it out. What happened?
* In the Interactions Area, type `animals-table.filter(is-old)`. What did you get?
* In the Interactions Area, type `animals-table.filter(is-dog)`. What did you get?
* In the Interactions Area, type `animals-table.filter(lookup-name)`. What did you get?

The `.filter` method walks through the table, applying whatever function it was given to each row, and producing a new table containing all the rows for which the function returned `true`. Notice that the Domain for `.filter` says that test must be a function (that’s the arrow), which consumes a `Row` and produces a `Boolean`. If it consumes anything besides a single `Row`, or if it produces anything else besides a `Boolean`, we'll get an error.

[.lesson-section-2]
=== Possible Misconceptions
Students often think that filtering a table _changes_ the table. In Pyret, all table methods produce a _brand new table_. If we want to save that table, we need to define it. For example: `cats = animals-table.filter(is-cat)`.

[.lesson-section-2]
=== Synthesize
Debrief with students. Some guiding questions on filtering:

- Suppose we wanted to determine whether cats or dogs get adopted faster. How might using the `.filter` method help?
- If the shelter is purchasing food for older cats, what filter would we write to determine how many cats to buy for?
- Can you think of a situation where filtering fixed animals would be helpful?

[.lesson-section-1]
== Building Columns %CURRICULUMspan% class="duration"%BEGINCURRICULUMspan%10 minutes%ENDCURRICULUMspan%

[.lesson-section-2]
=== Overview
Students learn how to _build columns_, using the `.build-column` table method.

[.lesson-section-2]
=== Launch
Suppose we want to _transform_ our table, converting `pounds` to `kilograms` or `weeks` to `days`. Or perhaps we want to add a "cute" column that just identifies the puppies and kittens? Have students find the contract for `.build-column` in their contracts pages. The `.build-column` method is taking in a _function_ and a _string_. What is the contract for that function? 

[.lesson-section-2]
=== Investigate
[.lesson-instruction]
* Try typing `animals-table.build-column("old", is-old)` into the Interactions Area. 
* Try typing `animals-table.build-column("sticker", label)` into the Interactions Area. 
* What do you get? What do you think is going on?

The `.build-column` method walks through the table, applying whatever function it was given to each row. Whatever the function produces for that row becomes the value of our new column, which is named based on the string it was given. In the first example, we gave it the `is-old` function, so the new table had an extra Boolean column for every animal, indicating whether or not it was young. Notice that the Domain for `.build-column` says that the builder must be a function which consumes a `Row` and produces some other value. If it consumes anything besides a single `Row`, we'll get an error.

[.lesson-section-2]
=== Synthesize
Debrief with students. Ask them if they think of a situation where they would want to use this. Some ideas:

- A dataset about school might include columns for how many students are in the school and how many pass the state exam. But when comparing schools of different sizes, what we really want is a column showing what _percentage_ passed the exam. We could use `.build-column` to compute that for every row in the table.
- The animals shelter might want to print nametags for every animal. They could build a column using the `text` function to have every animal's name in big, purple letters.
- A dataset from Europe might list everything in metric (centimeters, kilograms, etc), so we could build a column to convert that to imperial units (inches, pounds, etc).

[.lesson-section-1]
== Additional Exercises:

link:{pathwayrootdir}pass:[lessons/ds-table-methods/pages/what-table-do-we-get.html][What Table Do We Get?, window="_blank"]

[.acknowledgment]
--
These materials were developed partly through support of the National Science Foundation, 
(awards 1042210, 1535276, 1648684, and 1738598). link:https://www.creativecommons.org/licenses/by-nc-nd/4.0/[image:{pathwayrootdir}../../lib/CCbadge.png[], window="_blank"]
Bootstrap:Data Science by Emmanuel Schanzer, Nancy Pfenning, Emma Youndtsmith, Jennifer Poole, Shriram Krishnamurthi, Joe Politz, Ben Lerner, Flannery Denny, and Dorai Sitaram with help from Eric Allatta and Joy Straub
is licensed under a
https://creativecommons.org/licenses/by-nc-nd/4.0/[Creative Commons 4.0 Unported License].
Based on a work at https://www.bootstrapworld.org[www.BootstrapWorld.org].
Permissions beyond the scope of this license may be available by contacting
mailto:schanzer@BootstrapWorld.org[schanzer@BootstrapWorld.org]. 
--
