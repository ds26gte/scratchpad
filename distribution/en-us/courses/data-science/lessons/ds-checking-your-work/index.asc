[.LessonPlan]
[.pyret]
= Checking Your Work


Students consider the concept of trust and testing -- how do we know if a particular analysis is trustworthy?


[.left-header.preamble,cols="20a,80a",stripes=none]
|===

| Prerequisites | None

| 
++++
<script>
function showStandardsAlignment() {
  const selectTag = document.getElementsByClassName('standardsAlignmentSelect')[0];
  const options = selectTag && selectTag.options;
  const stdTables = document.getElementsByClassName('alignedStandards');
  const intro = document.getElementsByClassName('alignedStandardsIntro')[0];
  let introNeeded = true;
  for (let i = 0; i < stdTables.length; i++) {
    const stdTable = stdTables[i];
    stdTable.style.display = 'none';
  }
  for (let i = 0; i < options.length; i++) {
    const opt = options[i];
    if (opt.selected) {
      const optStd = opt.value;
      for (let j = 0; j < stdTables.length; j++) {
        const stdTable = stdTables[j];
        if (stdTable.classList.contains(optStd)) {
          stdTable.style.display = 'block';
          introNeeded = false;
        }
      }
    }
  }
  intro.style.display = introNeeded ? 'block' : 'none';
}
</script>
++++

Relevant Standards%CURRICULUMselect% class="standardsAlignmentSelect"  multiple onchange="showStandardsAlignment()" style="height: 150px"%BEGINCURRICULUMselect%%CURRICULUMoption% value="standards-OK"%BEGINCURRICULUMoption%OK%ENDCURRICULUMoption%%CURRICULUMoption% value="standards-K12CS"%BEGINCURRICULUMoption%K12CS%ENDCURRICULUMoption%%CURRICULUMoption% value="standards-CSTA"%BEGINCURRICULUMoption%CSTA%ENDCURRICULUMoption%%CURRICULUMoption% value="standards-NGSS"%BEGINCURRICULUMoption%NGSS%ENDCURRICULUMoption%%ENDCURRICULUMselect%

|

include::./pathway-standards.asc[]

| Lesson Goals
| Students will be able to...
- Create a subset of data to verify that a given transformation works as-advertised, using attributes of the transformation and the dataset.

| Student-facing Lesson Goals
|

* Let's learn how to test the trustworthiness of a data analysis.

| Materials
|
* Lesson Slides (link:pass:[https://docs.google.com/presentation/d/1R4NEcachtxAhEAhSa83Var3Jw5GqGMs5H9k8eM0OmVU/][Google Slides, window="_blank"])
* Computer for each student (or pair), with access to the internet
* link:{pathwayrootdir}/workbook/workbook.pdf[Student workbook], and something to write with

| Preparation
|
* Make sure all materials have been gathered
* Decide how students will be grouped in pairs
* Make sure all students can access link:pass:[https://code.pyret.org/editor#share=1VVz4l0P6GLwbcpYyAGYJuRgBxj69R52Z][the Trust-but-Verify Starter File, window="_blank"]

| Supplemental Resources
|

include::xtra/lang-prereq.asc[]
|===



include::./pathway-glossary.asc[]

[.lesson-section-1]
== Confirming Analysis %CURRICULUMspan% class="duration"%BEGINCURRICULUMspan%30 minutes%ENDCURRICULUMspan%

[.lesson-section-2]
=== Overview
Students learn how to create a _Testing Table_, which is small enough to reason about and can be used to test whether code does the right thing.

[.lesson-section-2]
=== Launch
Samples are taken in Data Science and Computer Programming for two different reasons. One of the main purposes of Data Science is to take a representative sample from a larger population, and use information from the sample to infer what’s true about the whole population. In programming, we often extract a smaller Table from a larger one, for the purpose of testing that our code seems to do what it’s supposed to. In this lesson, we focus on the tasks of programmers, and consider best practices for setting up a Testing Table that helps us check our code.

* Uber and Google are making self-driving cars, which use artificial intelligence to interpret sensor data and make predictions about whether a car should speed up, slow down, or slam on the brakes. This AI is trained on a lot of sample data, which it learns from. What might be the problem if the sample data only included roads in California?
* Law enforcement in many towns has started using facial-recognition software to automatically detect whether someone has a warrant out for their arrest. A lot of facial-recognition software, however, has been trained on sample data containing mostly white faces. As a result, it has gotten really good at telling white people apart, but link:pass:[https://www.theweek.co.uk/95383/is-facial-recognition-racist][often can’t tell the difference between people who aren’t white, window="_blank"]. Why might this be a problem?
* Why might it be a bad thing to only test medicines only on men (or only on women), before prescribing them to the general public?

[.lesson-point]
Testing Matters!

A good Testing Table should be _representative_ of the population, and _relevant_ to what’s being analyzed. A good Testing Table should have...

- _At least_ the columns that matter -- whether we’ll be ordering or filtering by those columns.
- Enough rows to include different circumstances that are relevant to the task at hand. For instance, if our code is supposed to extract certain cats from the animals table, our Testing Table should include at least one animal that’s not a cat.
- Rows that aren’t already sorted, if our analysis is supposed to sort for us.

Data scientists usually think in terms of samples that best serve the purpose of __performing inference__: Samples should be representative of the entire population, and large enough to get us fairly close to the truth about that population. Computer programmers need to think in terms of __Testing Tables__ that best serve the purpose of verifying that their code does what it’s supposed to: The Tables should be designed to call attention to any imperfections in the code’s instructions.

[.lesson-section-2]
=== Investigate
Testing Tables can also be used to _verify_ that a certain analysis is correct. A function that is supposed to filter a table and _show only the cats_ can't be tested with a Testing Table that only has cats to begin with. How would we know if the function filters out non-cats?

Suppose a function takes in a table of animals and shows _only the kittens_. A Testing Table should have cats and non-cats, as well as old and young cats.

Suppose a function takes in a table of animals and shows only the kittens, sorted in ascending order by weight. Now a Testing Table should have cats and non-cats, as well as old and young cats..._and_ have rows that aren't already sorted!

[.lesson-instruction]
* Turn to link:{pathwayrootdir}pass:[lessons/ds-checking-your-work/pages/trust-but-verify.html][“Trust&#x2c; but verify ...” (Page 67), window="_blank"] in your student workbook. 
* You’ve been given a function called `fixed-cats` and a description of what it _claims_ to do.
* List the names of the animals that you would use in a Testing Table to verify whether the function works as advertised. When you’ve finished, open the link:pass:[https://code.pyret.org/editor#share=1VVz4l0P6GLwbcpYyAGYJuRgBxj69R52Z][Trust-but-Verify Starter File, window="_blank"]. There are three versions of `fixed-cats` here. Are they all correct? If not, which ones are broken?
* Turn to link:{pathwayrootdir}pass:[lessons/ds-checking-your-work/pages/trust-but-verify-2.html][“Trust&#x2c; but verify…” (Page 68), window="_blank"]. Using the same Starter File, construct a Testing Table and figure out which (if any) of the functions are correct!

[.lesson-section-2]
=== Synthesize
Complex analysis has more room for mistakes, so it’s critical to think about a Testing Table that allows us to trust that our code really does what it’s supposed to!


[.acknowledgment]
--
These materials were developed partly through support of the National Science Foundation, 
(awards 1042210, 1535276, 1648684, and 1738598). link:https://www.creativecommons.org/licenses/by-nc-nd/4.0/[image:{pathwayrootdir}../../lib/CCbadge.png[], window="_blank"]
Bootstrap:Data Science by Emmanuel Schanzer, Nancy Pfenning, Emma Youndtsmith, Jennifer Poole, Shriram Krishnamurthi, Joe Politz, Ben Lerner, Flannery Denny, and Dorai Sitaram with help from Eric Allatta and Joy Straub
is licensed under a
https://creativecommons.org/licenses/by-nc-nd/4.0/[Creative Commons 4.0 Unported License].
Based on a work at https://www.bootstrapworld.org[www.BootstrapWorld.org].
Permissions beyond the scope of this license may be available by contacting
mailto:schanzer@BootstrapWorld.org[schanzer@BootstrapWorld.org]. 
--
