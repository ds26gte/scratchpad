<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="generator" content="Asciidoctor 2.0.10">
<title>Starting to Program</title>
<link rel="stylesheet" href="./../../../../lib/curriculum.css">
    <link rel="stylesheet" href="../../../../lib/codemirror.css" />
    <script type="text/javascript" src="../../../../lib/codemirror.js"></script>
    <script type="text/javascript" src="../../../../lib/runmode.js"></script>
    <script type="text/javascript" src="../../../../lib/scheme2.js"></script>
    <script type="text/javascript" src="../../../../lib/pyret-mode.js"></script>
    <script type="text/javascript" src="../../../../lib/bootstraplesson.js"></script>

  <script>window.___gcfg = {
  parsetags: 'explicit'
  };
  </script>
  <script src="https://apis.google.com/js/platform.js" async defer></script>
  <script>function renderSaveToDrive() {
    var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    gapi.savetodrive.render('savetodrive-div', {
    src:(window.location.href.match(/\/$/)?(window.location.href+'index-gdrive-import.html'):(window.location.href.replace(/([^\/]+)\.([^.\/]+)$/, '$1-gdrive-import.html'))),
    filename:"Starting to Program",
    sitename:"Bootstrap, Brown University"
  });
  if(isSafari){
    var warning = document.createElement("div");
    warning.id = "safariWarning";
    warning.innerHTML = "You appear to be using Safari, which interferes with Google's Save-to-Drive button. You can fix it by going to Preferences, clicking 'Privacy', and making sure that 'Prevent cross-site tracking' is <b>not</b> checked."
    var button = document.getElementById("savetodrive-div");
    button.parentNode.insertBefore(warning, warning.nextSibling);
  }
}
</script>
</head>
<body class="article LessonPlan pyret" onload="renderSaveToDrive()">
<!--#include virtual="/menubar.ssi"-->
<!-- Analytics -->
<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-46088504-1', 'bootstrapworld.org');
ga('send', 'pageview');

</script>
<div id="body" onload="renderSaveToDrive()">
<div id="header">
<h1>Starting to Program</h1>

  <div id="savetodrive-div"></div>

</div>
<div id="content">
<div id="preamble_disabled">
<div class="sectionbody">
<div class="paragraph">
<p>Students begin to program in Pyret, learning about basic datatypes, operations, and value definitions.</p>
</div>
<table class="tableblock frame-all grid-all stripes-none stretch left-header preamble">
<colgroup>
<col style="width: 20%;">
<col style="width: 80%;">
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Prerequisites</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>None</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div class="content"><script>
function showStandardsAlignment() {
  const selectTag = document.getElementsByClassName('standardsAlignmentSelect')[0];
  const options = selectTag && selectTag.options;
  const stdTables = document.getElementsByClassName('alignedStandards');
  const intro = document.getElementsByClassName('alignedStandardsIntro')[0];
  let introNeeded = true;
  for (let i = 0; i < stdTables.length; i++) {
    const stdTable = stdTables[i];
    stdTable.style.display = 'none';
  }
  for (let i = 0; i < options.length; i++) {
    const opt = options[i];
    if (opt.selected) {
      const optStd = opt.value;
      for (let j = 0; j < stdTables.length; j++) {
        const stdTable = stdTables[j];
        if (stdTable.classList.contains(optStd)) {
          stdTable.style.display = 'block';
          introNeeded = false;
        }
      }
    }
  }
  intro.style.display = introNeeded ? 'block' : 'none';
}
</script>
<div class="paragraph">
<p>Relevant Standards<select class="standardsAlignmentSelect"  multiple onchange="showStandardsAlignment()" style="height: 150px"><option value="standards-CSTA">CSTA</option></select></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph alignedStandardsIntro">
<p><em>Select one or more standards from the menu on the left (⌘-click on Mac, Ctrl-click elsewhere).</em></p>
</div>
<div class="dlist alignedStandards standards-CSTA standards-hierarchical-table">
<div class="title">CSTA Standards</div>
<dl>
<dt class="hdlist1">2-DA-07</dt>
<dd>
<p>Represent data using multiple encoding schemes.</p>
</dd>
</dl>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Lesson Goals</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Students will be able to&#8230;&#8203;</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Explain the difference between several data types: Numbers, Strings, Images and Booleans</p>
</li>
<li>
<p>Identify a data type for a given value</p>
</li>
<li>
<p>Write Numbers, Strings, and Booleans in the Interactions Area</p>
</li>
<li>
<p>Define values, and evaluate simple expressions that use defined values</p>
</li>
</ul>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Student-facing Lesson Goals</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="ulist">
<ul>
<li>
<p>Let&#8217;s explore programming in Pyret and learn about data types.</p>
</li>
</ul>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Materials</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="ulist">
<ul>
<li>
<p>Lesson Slides (<a href="https://docs.google.com/presentation/d/1EEqfeSF4b5aft8O6Sv7eP6Yfm1LxYPeVv85d2FO8W_4/" target="_blank" rel="noopener">Google Slides</a>)</p>
</li>
<li>
<p>Computer for each student (or pair), with access to the
internet</p>
</li>
<li>
<p><a href="../..//workbook/workbook.pdf">Student workbook</a>, and something to write with</p>
</li>
</ul>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Preparation</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="ulist">
<ul>
<li>
<p>Make sure all materials have been gathered</p>
</li>
<li>
<p>Decide how students will be grouped in pairs</p>
</li>
<li>
<p>Make sure student computers can access <a href="https://code.pyret.org" target="_blank" rel="noopener">the Pyret IDE (CPO)</a></p>
</li>
<li>
<p>All students will need acces to <a href="https://code.pyret.org" target="_blank" rel="noopener">code.pyret.org</a>, also known as "CPO". They should be able to log in using a Google Classroom, Google, or YouTube login.</p>
</li>
</ul>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Supplemental Resources</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Language Table</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>Students are not expected to have any familiarity with the Pyret programming for this lesson.</p>
</div></div></td>
</tr>
</tbody>
</table>
<div class="dlist glossary">
<div class="title">Glossary</div>
<dl>
<dt class="hdlist1">data row</dt>
<dd>
<p>a structured piece of data in a dataset that typically reports all the information gathered about a given individual</p>
</dd>
<dt class="hdlist1">definitions area</dt>
<dd>
<p>the left-most text box in the Editor where definitions for values and functions are written</p>
</dd>
<dt class="hdlist1">editor</dt>
<dd>
<p>software in which you can write and evaluate code</p>
</dd>
<dt class="hdlist1">header</dt>
<dd>
<p>the titles of each column of a table, usually shown at the top</p>
</dd>
<dt class="hdlist1">identifier column</dt>
<dd>
<p>a column of unique values which identify all the individual rows (e.g. - student IDs, SSNs, etc)</p>
</dd>
<dt class="hdlist1">interactions area</dt>
<dd>
<p>the right-most text box in the Editor, where expressions are entered to evaluate</p>
</dd>
</dl>
</div>
</div>
</div>
<div class="sect1 lesson-section-1">
<h2 id="_introducing_pyret_duration_10_minutes_"><span class="section-link"><a href="#_introducing_pyret_duration_10_minutes_"><span class="section-link-symbol">&#128279;</span></a></span>Introducing Pyret <span class="duration">10 minutes</span></h2>
<div class="sectionbody">
<div class="sect2 lesson-section-2">
<h3 id="_overview">Overview</h3>
<div class="paragraph">
<p>Students open up the Pyret environment (code.pyret.org, or "CPO") and see how tables look in Pyret.</p>
</div>
</div>
<div class="sect2 lesson-section-2">
<h3 id="_launch">Launch</h3>
<div class="paragraph">
<p><span class="right"><span class="image"><img src="../../lessons/ds-pyret-intro/images/editor.png" alt="" width="300" height=""></span><a href="images/editor.png" class="gdrive-only"><span class="big">&#x1f5bc;</span>Show image</a></span></p>
</div>
<div class="paragraph">
<p>Open up the <a href="https://code.pyret.org/editor#share=1ZupMVPWvVUOM0HCWyA7cRBghSLKxPWv1" target="_blank" rel="noopener">Animals Starter File</a> in a new tab. Click “Connect to Google Drive” to sign into your Google account. This will allow you to save Pyret files into your Google Drive. Next, click the "File" menu and select "Save a Copy". This will save a copy of the file into your own account, so that you can make changes and retrieve them later.</p>
</div>
<div class="paragraph">
<p>This screen is called the <span class="vocab">Editor</span>, and it looks something like the diagram you see here. There are a few buttons at the top, but most of the screen is taken up by two large boxes: the <span class="vocab">Definitions Area</span> on the left and the <span class="vocab">Interactions Area</span> on the right.</p>
</div>
<div class="paragraph">
<p>The <span class="vocab">Definitions Area</span> is where programmers define values and functions that they want to keep, while the <span class="vocab">Interactions Area</span> allows them to experiment with those values and functions. This is like writing function definitions on a blackboard, and having students use those functions to compute answers on scrap paper.</p>
</div>
<div class="paragraph">
<p>For now, we will only be writing programs in the Interactions Area.</p>
</div>
<div class="paragraph">
<p><span class="clear"></span></p>
</div>
<div class="paragraph">
<p>The first few lines in the Definitions Area tell Pyret to <code><tt class="pyret">import</tt></code> files from elsewhere, which contain tools we’ll want to use for this course. We’re importing a file called Bootstrap:Data Science, as well as files for working with Google Sheets, tables, and images:</p>
</div>
<div class="literalblock">
<div class="content">
<pre><tt class="pyret">include shared-gdrive("Bootstrap-DataScience-...")
include gdrive-sheets
include tables
include image</tt></pre>
</div>
</div>
<div class="paragraph">
<p>After that, we see a line of code that <em>defines</em> <code><tt class="pyret">shelter-sheet</tt></code> to be a spreadsheet. This table is loaded from Google Drive, so now Pyret can see the same spreadsheet you do. (Notice the funny scramble of letters and numbers in that line of code? If you open up the Google Sheet, you&#8217;ll find that same scramble in the address bar! That scramble is how the Pyret editor knows which spreadsheet to load.) After that, we see the following code:</p>
</div>
<div class="literalblock">
<div class="content">
<pre><tt class="pyret"># load the 'pets' sheet as a table called animals-table
animals-table = load-table: name, species, age, fixed, legs
  source: pets-sheet.sheet-by-name("pets", true)
end</tt></pre>
</div>
</div>
<div class="paragraph">
<p>The first line (starting with <code><tt class="pyret">#</tt></code>) is called a <em>Comment</em>. Comments are notes for humans, which the computer ignores. The next line defines a new table called <code><tt class="pyret">animals-table</tt></code>, which is loaded from the <code><tt class="pyret">shelter-sheet</tt></code> defined above. We also create names for the columns: <code><tt class="pyret">name</tt></code>, <code><tt class="pyret">species</tt></code>, <code><tt class="pyret">sex</tt></code>, <code><tt class="pyret">age</tt></code>, <code><tt class="pyret">fixed</tt></code>, <code><tt class="pyret">legs</tt></code>, <code><tt class="pyret">pounds</tt></code> and <code><tt class="pyret">weeks</tt></code>. We could use any names we want for these columns, but it’s always a good idea to pick names that make sense!</p>
</div>
<div class="paragraph lesson-point">
<p>Even if your spreadsheet already has column headers, Pyret requires that you name them in the program itself.</p>
</div>
<div class="paragraph lesson-instruction">
<p>Click “Run”, and type <code><tt class="pyret">animals-table</tt></code> into the Interactions Area to see what the table looks like in Pyret. Is it the same table you saw in Google Sheets? What is the same? What is different?</p>
</div>
<div class="paragraph">
<p>In Data Science, every table is composed of cells, which are arranged in a grid of rows and columns. Most of the cells contain data, but <em>the first row and first column</em> are special. The first row is called the <span class="vocab">header row</span>, which gives a unique name to each variable (or “column”) in the table. The first column in the table is the <span class="vocab">identifier column</span>, which contains a unique ID for each row. Often, this will be the name of each individual in the table, or sometimes just an ID number.</p>
</div>
<div class="paragraph">
<p>Below is an example of a table with one header row and two data rows:</p>
</div>
<table class="tableblock frame-all grid-all stretch pyret-table">
<colgroup>
<col style="width: 12.5%;">
<col style="width: 12.5%;">
<col style="width: 12.5%;">
<col style="width: 12.5%;">
<col style="width: 12.5%;">
<col style="width: 12.5%;">
<col style="width: 12.5%;">
<col style="width: 12.5%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">name</th>
<th class="tableblock halign-left valign-top">species</th>
<th class="tableblock halign-left valign-top">sex</th>
<th class="tableblock halign-left valign-top">age</th>
<th class="tableblock halign-left valign-top">fixed</th>
<th class="tableblock halign-left valign-top">legs</th>
<th class="tableblock halign-left valign-top">pounds</th>
<th class="tableblock halign-left valign-top">weeks</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>"Sasha"</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>"cat"</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>"female"</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>1</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>false</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>4</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>6.5</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>3</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>"Mittens"</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>"cat"</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>"female"</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>2</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>true</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>4</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>7.4</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>1</p>
</div></div></td>
</tr>
</tbody>
</table>
</div>
<div class="sect2 lesson-section-2">
<h3 id="_investigate">Investigate</h3>
<div class="ulist lesson-instruction">
<ul>
<li>
<p>How many variables are listed in the header row for the Animals Dataset? What are they called? What is being used for the identifier column in this dataset?</p>
</li>
<li>
<p>Try changing the name of one of the columns, and click "Run". What happens when you print out the table back in the Interactions Area?</p>
</li>
<li>
<p>What happens if you remove a column from the list? Or add an extra one?</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>After the header, Pyret tables can have any number of <span class="vocab">data rows</span>.
Each data row has values for every column variable (nothing can be left empty!). A table can have any number of data rows, including <em>zero</em>, as in the table below:</p>
</div>
<table class="tableblock frame-all grid-all stretch pyret-table">
<colgroup>
<col style="width: 12.5%;">
<col style="width: 12.5%;">
<col style="width: 12.5%;">
<col style="width: 12.5%;">
<col style="width: 12.5%;">
<col style="width: 12.5%;">
<col style="width: 12.5%;">
<col style="width: 12.5%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">name</th>
<th class="tableblock halign-left valign-top">species</th>
<th class="tableblock halign-left valign-top">sex</th>
<th class="tableblock halign-left valign-top">age</th>
<th class="tableblock halign-left valign-top">fixed</th>
<th class="tableblock halign-left valign-top">legs</th>
<th class="tableblock halign-left valign-top">pounds</th>
<th class="tableblock halign-left valign-top">weeks</th>
</tr>
</thead>
</table>
</div>
</div>
</div>
<div class="sect1 lesson-section-1">
<h2 id="_numbers_strings_and_booleans_duration_25_minutes_"><span class="section-link"><a href="#_numbers_strings_and_booleans_duration_25_minutes_"><span class="section-link-symbol">&#128279;</span></a></span>Numbers, Strings and Booleans <span class="duration">25 minutes</span></h2>
<div class="sectionbody">
<div class="sect2 lesson-section-2">
<h3 id="_overview_2">Overview</h3>
<div class="paragraph">
<p>This lesson starts them programming, showing students how to make Pyret do simple math, work with text, and create simple computer graphics. It also draws attention to error messages, which are helpful when diagnosing mistakes.</p>
</div>
</div>
<div class="sect2 lesson-section-2">
<h3 id="_launch_2">Launch</h3>
<div class="paragraph">
<p>Pyret lets us use many different kinds of data. In the animals table, for example, there are Numbers (the number of legs each animal has), Strings (the species of the animal), and Booleans (whether it is true or false that an animal is fixed). Pyret has the usual arithmetic operators: addition (<code><tt class="pyret">+</tt></code>), subtraction (<code><tt class="pyret">-</tt></code>), multiplication (<code><tt class="pyret">*</tt></code>), and division (<code><tt class="pyret">/</tt></code>).</p>
</div>
<div class="paragraph">
<p>To identify if an animal is male, we need to know if the value in the <code><tt class="pyret">sex</tt></code> column is <em>equal</em> to the string <code><tt class="pyret">"male"</tt></code>. To sort the table by age, we need to know if one animal’s age is <em>less than</em> another’s and should come before it. To filter the table to show only young animals, we might want to know if an animal’s age is <em>less than</em> 2. Pyret has Boolean operators, too: equals (<code><tt class="pyret">==</tt></code>), less-than (<code><tt class="pyret">&lt;</tt></code>), greater-than (<code><tt class="pyret">&gt;</tt></code>), as well as greater-than-or-equal (<code><tt class="pyret">&gt;=</tt></code>) and less-than-or-equal (<code><tt class="pyret">&lt;=</tt></code>).</p>
</div>
</div>
<div class="sect2 lesson-section-2">
<h3 id="_investigate_2">Investigate</h3>
<div class="paragraph lesson-instruction">
<p>In pairs, students complete <a href="../../lessons/ds-pyret-intro/pages/numbers-n-strings.html" target="_blank" rel="noopener">Numbers and Strings (Page 7)</a>.</p>
</div>
<div class="paragraph">
<p>Discuss what students have learned about Pyret:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Numbers and Strings evaluate to themselves.</p>
</li>
<li>
<p>Anything in quotes is a String, even something like <code><tt class="pyret">"42"</tt></code>.</p>
</li>
<li>
<p>Strings <em>must</em> have quotation marks on both sides.</p>
</li>
<li>
<p>Operators like <code><tt class="pyret">+</tt></code>, <code><tt class="pyret">-</tt></code>, <code><tt class="pyret">*</tt></code>, and <code><tt class="pyret">/</tt></code> need spaces around them.</p>
</li>
<li>
<p>Any time there is more than one operator being used, Pyret requires that you use parentheses.</p>
</li>
<li>
<p>Types matter! We can add two Numbers or two Strings to one another, but we can’t add the Number <code><tt class="pyret">4</tt></code> to the String <code><tt class="pyret">"hello"</tt></code>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Error messages are a way for Pyret to explain what went wrong, and are a really helpful way of finding mistakes. Emphasize how useful they can be, and why students should read those messages out loud before asking for help. Have students see the following errors:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code><tt class="pyret">6 / 0</tt></code>. In this case, Pyret obeys the same rules as humans, and gives an error.</p>
</li>
<li>
<p>A`(2 + 2`. An unclosed quotation mark is a problem, and so is an unmatched parentheses.</p>
</li>
</ul>
</div>
<div class="paragraph lesson-instruction">
<p>In pairs, students complete <a href="../../lessons/ds-pyret-intro/pages/booleans.html" target="_blank" rel="noopener">Booleans (Page 8)</a>.</p>
</div>
<div class="sect3 lesson-section-3">
<h4 id="_synthesize">Synthesize</h4>
<div class="paragraph">
<p>Debrief student answers as a class.</p>
</div>
<table class="tableblock frame-all grid-none stripes-none stretch strategy-box">
<colgroup>
<col style="width: 100%;">
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="title">Going Deeper</span></p>
<p class="tableblock">By using the <code><tt class="pyret">and</tt></code> and <code><tt class="pyret">or</tt></code> operators, we can <em>combine</em> boolean tests, as in: <code><tt class="pyret">(1 &gt; 2) and ("a" == "b")</tt></code>. This is handy for more complex programs! For example, we might want to ask if a character in a video game has run out of health points <em>and</em> if they have any more lives. We might want to know if someone’s ZIP Code puts them in Texas or New Mexico. When you go out to eat at a restaurant, you might ask what items on the menu have meat and cheese. We’ll use these Boolean operators in a lot of our Data Science work later on. See "Additional Exercises" if you&#8217;d like to have students get some practice with <code><tt class="pyret">and</tt></code> and <code><tt class="pyret">or</tt></code>.</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="sect1 lesson-section-1">
<h2 id="_defining_values_duration_20_minutes_"><span class="section-link"><a href="#_defining_values_duration_20_minutes_"><span class="section-link-symbol">&#128279;</span></a></span>Defining Values <span class="duration">20 minutes</span></h2>
<div class="sectionbody">
<div class="sect2 lesson-section-2">
<h3 id="_overview_3">Overview</h3>
<div class="paragraph">
<p>Students learn how to define values in Pyret (note that these definitions work the way variable substitution does in math, as opposed to variable assignment you may have seen in other programming languages).</p>
</div>
</div>
<div class="sect2 lesson-section-2">
<h3 id="_launch_3">Launch</h3>
<div class="paragraph">
<p>Pyret allows us to define names for values using the <code><tt class="pyret">=</tt></code> sign. In math, you’re probably used to seeing definitions like <em>x = 4</em>, which defines the name x to be the value 4. Pyret works the same way, and you’ve already seen two names defined in this file: <code><tt class="pyret">shelter-sheet</tt></code> and <code><tt class="pyret">animals-table</tt></code>. We generally write definitions on the left, in the Definitions Area. You can add your own definitions, for example:</p>
</div>
<div class="literalblock">
<div class="content">
<pre><tt class="pyret">my-name = "Maya"
sum = 2 + 2
kittens-are-cute = true</tt></pre>
</div>
</div>
<div class="openblock lesson-instruction">
<div class="content">
<div class="paragraph">
<p>With your partner, take turns adding definitions to this file:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Define a value with name <code><tt class="pyret">food</tt></code>, whose value is a String representing your favorite food</p>
</li>
<li>
<p>Define a value with name <code><tt class="pyret">year</tt></code>, whose value is a Number representing the current year</p>
</li>
<li>
<p>Define a value with name <code><tt class="pyret">likes-cats</tt></code>, whose value is a Boolean that is <code><tt class="pyret">true</tt></code> if you like cats and <code><tt class="pyret">false</tt></code> if you don’t</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect2 lesson-section-2">
<h3 id="_synthesize_2">Synthesize</h3>
<div class="paragraph">
<p>TODO</p>
</div>
</div>
</div>
</div>
<div class="sect1 lesson-section-1">
<h2 id="_additional_exercises"><span class="section-link"><a href="#_additional_exercises"><span class="section-link-symbol">&#128279;</span></a></span>Additional Exercises:</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p><a href="../../lessons/ds-pyret-intro/pages/boolean-operators.html" target="_blank" rel="noopener">Boolean Operators</a></p>
</li>
</ul>
</div>
<div class="openblock acknowledgment">
<div class="content">
<div class="paragraph">
<p>These materials were developed partly through support of the National Science Foundation,
(awards 1042210, 1535276, 1648684, and 1738598). <a href="https://www.creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener"><span class="image"><img src="../../../../lib/CCbadge.png" alt="CCbadge"></span></a>
Bootstrap:Data Science by Emmanuel Schanzer, Nancy Pfenning, Emma Youndtsmith, Jennifer Poole, Shriram Krishnamurthi, Joe Politz, Ben Lerner, Flannery Denny, and Dorai Sitaram with help from Eric Allatta and Joy Straub
is licensed under a
<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/">Creative Commons 4.0 Unported License</a>.
Based on a work at <a href="https://www.bootstrapworld.org">www.BootstrapWorld.org</a>.
Permissions beyond the scope of this license may be available by contacting
<a href="mailto:schanzer@BootstrapWorld.org">schanzer@BootstrapWorld.org</a>.</p>
</div>
</div>
</div>
</div>
</div>
</div>
<div id="footer">
<div id="footer-text">
Last updated 2020-08-19 20:34:23 -0400
</div>
</div>
</div>
</body>
</html>