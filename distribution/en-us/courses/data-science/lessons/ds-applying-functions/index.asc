[.LessonPlan]
[.pyret]
= Applying Functions


Students learn how to apply Functions, and how to interpret the information contained in a Contract: Name, Domain and Range. They then use this knowledge to explore more of the Pyret language.


[.left-header.preamble,cols="20a,80a",stripes=none]
|===

| Prerequisites | link:{pathwayrootdir}lessons/pass:[ds-pyret-intro]/index.shtml[Starting to Program]

| 
++++
<script>
function showStandardsAlignment() {
  const selectTag = document.getElementsByClassName('standardsAlignmentSelect')[0];
  const options = selectTag && selectTag.options;
  const stdTables = document.getElementsByClassName('alignedStandards');
  const intro = document.getElementsByClassName('alignedStandardsIntro')[0];
  let introNeeded = true;
  for (let i = 0; i < stdTables.length; i++) {
    const stdTable = stdTables[i];
    stdTable.style.display = 'none';
  }
  for (let i = 0; i < options.length; i++) {
    const opt = options[i];
    if (opt.selected) {
      const optStd = opt.value;
      for (let j = 0; j < stdTables.length; j++) {
        const stdTable = stdTables[j];
        if (stdTable.classList.contains(optStd)) {
          stdTable.style.display = 'block';
          introNeeded = false;
        }
      }
    }
  }
  intro.style.display = introNeeded ? 'block' : 'none';
}
</script>
++++

Relevant Standards%CURRICULUMselect% class="standardsAlignmentSelect"  multiple onchange="showStandardsAlignment()" style="height: 150px"%BEGINCURRICULUMselect%%CURRICULUMoption% value="standards-OK"%BEGINCURRICULUMoption%OK%ENDCURRICULUMoption%%CURRICULUMoption% value="standards-CC-Math"%BEGINCURRICULUMoption%CC-Math%ENDCURRICULUMoption%%ENDCURRICULUMselect%

|

include::./pathway-standards.asc[]

| Lesson Goals
| Students will be able to...

* Apply functions to create Images
* Identify the parts of a Contract, and use it to apply a function

| Student-facing Lesson Goals
|

* Let's use different types of input to create images with functions.

| Materials
|
* Lesson Slides (link:pass:[https://docs.google.com/presentation/d/1Guoozn2nrzlCF2na8G9VTGXECMo4x2oNQPZptryf0ds/][Google Slides, window="_blank"])
* Computer for each student (or pair), with access to the
internet
* link:{pathwayrootdir}/workbook/workbook.pdf[Student workbook], and something to write with

| Preparation
|
* Make sure all materials have been gathered
* Decide how students will be grouped in pairs
* Make sure student computers can access link:pass:[https://code.pyret.org][the Pyret IDE (CPO), window="_blank"]
* All students should log into link:pass:[https://code.pyret.org][CPO, window="_blank"] and open the "Animals Starter File" they saved from the prior lesson. If they don't have the file, they can link:pass:[https://code.pyret.org/editor#share=1ZupMVPWvVUOM0HCWyA7cRBghSLKxPWv1][open a new one, window="_blank"]

| Supplemental Resources
|

include::xtra/lang-prereq.asc[]
|===




include::./pathway-glossary.asc[]

[.lesson-section-1]
== Applying Functions %CURRICULUMspan% class="duration"%BEGINCURRICULUMspan%15 minutes%ENDCURRICULUMspan%

[.lesson-section-2]
=== Overview
Students learn how to apply functions in Pyret, reinforcing concepts from standard Algebra.

[.lesson-section-2]
=== Launch
Students know about Numbers, Strings, Booleans and Operators -- all of which behave just like they do in math. But what about %CURRICULUMspan% class="vocab"%BEGINCURRICULUMspan%functions%ENDCURRICULUMspan%? They may remember functions from algebra: %CURRICULUMspan% class="gdrive-only"%BEGINCURRICULUMspan%fx = x²%ENDCURRICULUMspan%%CURRICULUMspan% class="begin-ignore-for-gdrive"%BEGINCURRICULUMspan%%ENDCURRICULUMspan%%CURRICULUMSCRIPT%%BEGINCURRICULUMSCRIPT%\displaystyle f(x) = x²%ENDCURRICULUMSCRIPT%%CURRICULUMspan% class="end-ignore-for-gdrive"%BEGINCURRICULUMspan%%ENDCURRICULUMspan%.

[.lesson-instruction]
- What is the name of this function?
- The expression %CURRICULUMspan% class="gdrive-only"%BEGINCURRICULUMspan%f2%ENDCURRICULUMspan%%CURRICULUMspan% class="begin-ignore-for-gdrive"%BEGINCURRICULUMspan%%ENDCURRICULUMspan%%CURRICULUMSCRIPT%%BEGINCURRICULUMSCRIPT%\displaystyle f(2)%ENDCURRICULUMSCRIPT%%CURRICULUMspan% class="end-ignore-for-gdrive"%BEGINCURRICULUMspan%%ENDCURRICULUMspan% applies the function %CURRICULUMspan% class="gdrive-only"%BEGINCURRICULUMspan%f%ENDCURRICULUMspan%%CURRICULUMspan% class="begin-ignore-for-gdrive"%BEGINCURRICULUMspan%%ENDCURRICULUMspan%%CURRICULUMSCRIPT%%BEGINCURRICULUMSCRIPT%\displaystyle f%ENDCURRICULUMSCRIPT%%CURRICULUMspan% class="end-ignore-for-gdrive"%BEGINCURRICULUMspan%%ENDCURRICULUMspan% to the number 2. What will it evaluate to? 
- What will the expression %CURRICULUMspan% class="gdrive-only"%BEGINCURRICULUMspan%f3%ENDCURRICULUMspan%%CURRICULUMspan% class="begin-ignore-for-gdrive"%BEGINCURRICULUMspan%%ENDCURRICULUMspan%%CURRICULUMSCRIPT%%BEGINCURRICULUMSCRIPT%\displaystyle f(3)%ENDCURRICULUMSCRIPT%%CURRICULUMspan% class="end-ignore-for-gdrive"%BEGINCURRICULUMspan%%ENDCURRICULUMspan% evaluate to?
- The values to which we apply a function are called its %CURRICULUMspan% class="vocab"%BEGINCURRICULUMspan%arguments%ENDCURRICULUMspan%. How many arguments does %CURRICULUMspan% class="gdrive-only"%BEGINCURRICULUMspan%f%ENDCURRICULUMspan%%CURRICULUMspan% class="begin-ignore-for-gdrive"%BEGINCURRICULUMspan%%ENDCURRICULUMspan%%CURRICULUMSCRIPT%%BEGINCURRICULUMSCRIPT%\displaystyle f%ENDCURRICULUMSCRIPT%%CURRICULUMspan% class="end-ignore-for-gdrive"%BEGINCURRICULUMspan%%ENDCURRICULUMspan% expect?

%CURRICULUMspan% class="vocab"%BEGINCURRICULUMspan%Arguments%ENDCURRICULUMspan% (or "inputs") are the values passed into a function. This is different from _variables_, which are the placeholders that get _replaced_ with input values! Pyret has lots of built-in functions, which we can use to write more interesting programs. 

[.lesson-instruction]
--
Have students log into link:pass:[https://code.pyret.org][CPO, window="_blank"] and open the "Animals Starter File". If they don't have the file, they can link:pass:[https://code.pyret.org/editor#share=1ZupMVPWvVUOM0HCWyA7cRBghSLKxPWv1][open a new one, window="_blank"]. Have students type this line of code into the interactions area and hit Enter: `num-sqrt(16)`.

- What is the name of this function?
- What do we think the expression `num-sqrt(16)` will evaluate to?
- What did the expression `num-sqrt(16)` evaluate to?
- Does the `num-sqrt` function produce Numbers? Strings? Booleans?
- How many %CURRICULUMspan% class="vocab"%BEGINCURRICULUMspan%arguments%ENDCURRICULUMspan% does `num-sqrt` expect?

Have students type this line of code into the interactions area and hit Enter: `num-min(140, 84)`.

- What is the name of this function?
- What does the expression `num-min(16, 99)` evaluate to?
- Does the `num-min` function produce Numbers? Strings? Booleans?
- How many %CURRICULUMspan% class="vocab"%BEGINCURRICULUMspan%arguments%ENDCURRICULUMspan% does `num-min` expect?
- What happens if we forget to include a comma between our numbers?
--

Just like in math, functions can also be _composed_ with one another. For example:
```
# take the minimum of 84 and 99, then take the square root of the result
num-sqrt(num-min(84, 99))
```

[.lesson-section-2]
=== Investigation
[.lesson-instruction]
Have students complete link:{pathwayrootdir}pass:[lessons/ds-applying-functions/pages/applying-functions.html][Applying Functions (Page 9), window="_blank"].

[.lesson-section-2]
=== Synthesize
Debrief the activity with the class. What kind of value was produced by that expression? (An Image! New datatype!) Which error messages were helpful? Which ones weren't?

[.lesson-section-1]
== Contracts %CURRICULUMspan% class="duration"%BEGINCURRICULUMspan%35 minutes%ENDCURRICULUMspan%

[.lesson-section-2]
=== Overview
Students learn about *Contracts*, and how they can be used to figure out new functions or diagnose errors in their code. Then they use this knowledge to explore the contracts pages in their workbooks.

[.lesson-section-2]
=== Launch

When students typed `triangle(50, "solid", "red")`, they created an example of a new Datatype, called an _Image_.

- What are the types of the arguments `triangle` was expecting?
- How does this output relate to the inputs?
- Try making different triangles. Change the size and color! Try using `"outline"` for the second argument.

The `triangle` function consumes a Number and two Strings as input, and produces an Image. As you can imagine, there are many other functions for making images, each with a different set of arguments. For each of these functions, we need to keep track of
three things:

. *Name* -- the name of the function, which we type in whenever we want to use it
. *Domain* -- the type of data we give to the function (names and
  Types!), written between parentheses and separated by commas
. *Range* -- the type of data the function produces

Domain and Range are _Types_, not specific values. As a convention, we *capitalize Types and keep names in lowercase*. `triangle` works on many different Numbers, not just the `20` we used in the example above!

These three parts make up a %CURRICULUMspan% class="vocab"%BEGINCURRICULUMspan%contract%ENDCURRICULUMspan% for each function. Let’s take a look at the Name, Domain, and Range of the functions we've seen before:

----
# num-sqrt :: (n :: Number) -> Number
# num-min :: (a :: Number, b :: Number) -> Boolean
# triangle :: (side :: Number, mode :: String, color :: String) -> Image
----

The first part of a contract is the function’s name. In this example, our functions are named `num-sqrt`, and `triangle`.

The second part is the %CURRICULUMspan% class="vocab"%BEGINCURRICULUMspan%Domain%ENDCURRICULUMspan%, or the names and types of arguments the function expects. `triangle` has a Number and two Strings as variables, representing the length of each side, the mode, and the color. We write name-type pairs with double-colons, with commas between each one. Finally, after the arrow goes the type of the %CURRICULUMspan% class="vocab"%BEGINCURRICULUMspan%Range%ENDCURRICULUMspan%, or the function’s output, which in this case is Image.

Contracts tell us a lot about how to use a function. In fact, we can figure out how to use functions we've never seen before, just by looking at the contract! Most of the time, error messages occur when we've accidentally broken a contract.

[.lesson-section-2]
=== Investigate
[.lesson-instruction]
--
Turn to the back of your workbook, and get some practice reading and using Contracts! Make sure you try out the following functions:

- `text`
- `circle`
- `ellipse`
- `star`
- `string-repeat`

When you've figured out the code for each of these, *write it down in the empty line beneath each contract*. These pages will become your reference for the remainder of the class!

Here’s an _example_ of another function. Type it into the Interactions Area to see what it does. Can you figure out the contract, based on the example? 
`string-contains("apples, pears, milk", "pears")`
--

[.lesson-section-2]
=== Possible Misconceptions
Students are _very_ likely to randomly experiment, rather than actually using the Contracts page. You should plan to ask lots of direct questions to make sure students are making this connection, such as:

- How many items are in this function's Domain?
- What is the _name_ of the 1st item in this function's Domain?
- What is the _type_ of the 1st item in this function's Domain?
- What is the _type_ of the Range?

[.lesson-section-3]
==== Synthesize
You’ve learned about Numbers, Strings, Booleans, and Images. You’ve learned about operators and functions, and how they can be used to make shapes, strings, and more!

One of the other skills you’ll learn in this class is how to diagnose and fix errors. Some of these errors will be _syntax errors_: a missing comma, an unclosed string, etc. All the other errors are _contract errors_. If you see an error and you know the syntax is right, ask yourself these two questions:

- What is the function that is generating that error?
- What is the contract for that function?
- Is the function getting what it needs, according to its Domain?

By learning to use values, operations and functions, you are now familiar with the fundamental concepts needed to write simple programs. You will have many opportunities to use these concepts in this course, by writing programs to answer data science questions.

Make sure to save your work, so you can go back to it later!

[.lesson-section-1]
== Additional Exercises:

- link:{pathwayrootdir}pass:[lessons/ds-applying-functions/pages/fun-with-images.html][Fun with Images, window="_blank"]
- link:{pathwayrootdir}pass:[lessons/ds-applying-functions/pages/practicing-contracts-2.html][Reading Contracts, window="_blank"]
- link:{pathwayrootdir}pass:[lessons/ds-applying-functions/pages/matching-expressions-2.html][Matching Expressions and Contracts, window="_blank"]


[.acknowledgment]
--
These materials were developed partly through support of the National Science Foundation, 
(awards 1042210, 1535276, 1648684, and 1738598). link:https://www.creativecommons.org/licenses/by-nc-nd/4.0/[image:{pathwayrootdir}../../lib/CCbadge.png[], window="_blank"]
Bootstrap:Data Science by Emmanuel Schanzer, Nancy Pfenning, Emma Youndtsmith, Jennifer Poole, Shriram Krishnamurthi, Joe Politz, Ben Lerner, Flannery Denny, and Dorai Sitaram with help from Eric Allatta and Joy Straub
is licensed under a
https://creativecommons.org/licenses/by-nc-nd/4.0/[Creative Commons 4.0 Unported License].
Based on a work at https://www.bootstrapworld.org[www.BootstrapWorld.org].
Permissions beyond the scope of this license may be available by contacting
mailto:schanzer@BootstrapWorld.org[schanzer@BootstrapWorld.org]. 
--
