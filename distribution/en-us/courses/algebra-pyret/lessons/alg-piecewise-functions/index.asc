[.LessonPlan]
[.pyret]
= Piecewise Functions

%CURRICULUMspan% class="other-proglang"%BEGINCURRICULUMspan%link:{pathwayrootdir}../algebra-wescheme/lessons/alg-piecewise-functions/index.shtml[(Also available for WeScheme)]%ENDCURRICULUMspan%


Students will learn how one function can have different behaviors based on the input.



[.left-header.preamble,cols="20a,80a",stripes=none]
|===

| Prerequisites | link:{pathwayrootdir}lessons/pass:[alg-simple-inequalities]/index.shtml[Simple Inequalities]

| 
++++
<script>
function showStandardsAlignment() {
  const selectTag = document.getElementsByClassName('standardsAlignmentSelect')[0];
  const options = selectTag && selectTag.options;
  const stdTables = document.getElementsByClassName('alignedStandards');
  const intro = document.getElementsByClassName('alignedStandardsIntro')[0];
  let introNeeded = true;
  for (let i = 0; i < stdTables.length; i++) {
    const stdTable = stdTables[i];
    stdTable.style.display = 'none';
  }
  for (let i = 0; i < options.length; i++) {
    const opt = options[i];
    if (opt.selected) {
      const optStd = opt.value;
      for (let j = 0; j < stdTables.length; j++) {
        const stdTable = stdTables[j];
        if (stdTable.classList.contains(optStd)) {
          stdTable.style.display = 'block';
          introNeeded = false;
        }
      }
    }
  }
  intro.style.display = introNeeded ? 'block' : 'none';
}
</script>
++++

Relevant Standards%CURRICULUMselect% class="standardsAlignmentSelect"  multiple onchange="showStandardsAlignment()" style="height: 150px"%BEGINCURRICULUMselect%%CURRICULUMoption% value="standards-OK"%BEGINCURRICULUMoption%OK%ENDCURRICULUMoption%%CURRICULUMoption% value="standards-CC-Math"%BEGINCURRICULUMoption%CC-Math%ENDCURRICULUMoption%%ENDCURRICULUMselect%

|

include::./pathway-standards.asc[]

| Lesson Goals
| Students will be able to:

* Explain what a piecewise function is.
* Give examples of inputs and outputs of a given %CURRICULUMspan% class="vocab"%BEGINCURRICULUMspan%piecewise function%ENDCURRICULUMspan%.

| Student-Facing Lesson Goals
|
* I can describe how piecewise functions work.

| Materials
|

* Lesson slides template (link:pass:[https://docs.google.com/presentation/d/12N4SJTiOq5aymbry1Yw94ER8Ea3fyyKIkppVsb1SFKw/edit?usp=sharing][Google Slides, window="_blank"])



* Alice's Restaurant starter file (link:pass:[https://code.pyret.org/editor#share=1_TxgoUCDKY3WYn_Vu9J1_2LXkY1o0dx_][Pyret, window="_blank"])

* Restaurant - Intro (link:{pathwayrootdir}pass:[lessons/alg-piecewise-functions/pages/restaurant-intro.html][Original (Page 48), window="_blank"], link:{pathwayrootdir}pass:[lessons/alg-piecewise-functions/solution-pages/restaurant-intro.html][Solution (Page 48), window="_blank"])
* Restaurant - Explore (link:{pathwayrootdir}pass:[lessons/alg-piecewise-functions/pages/restaurant-explore.html][Original (Page 49), window="_blank"], link:{pathwayrootdir}pass:[lessons/alg-piecewise-functions/solution-pages/restaurant-explore.html][Solution (Page 49), window="_blank"])

| Preparation
|
* Make sure all materials have been gathered
* Decide how students will be grouped in pairs

| Supplemental Resources
|
* Domain & Range of Piecewise Functions (link:pass:[https://teacher.desmos.com/activitybuilder/custom/57d6b323d5b6478408b8748b][Desmos Activity, window="_blank"])

| Key Points for the Facilitator
|
* The Design Recipe looks a bit different for piecewise, or %CURRICULUMspan% class="vocab"%BEGINCURRICULUMspan%conditional%ENDCURRICULUMspan%, %CURRICULUMspan% class="vocab"%BEGINCURRICULUMspan%function%ENDCURRICULUMspan%s.  Check that students are taking time to write %CURRICULUMspan% class="vocab"%BEGINCURRICULUMspan%example%ENDCURRICULUMspan%s and circle what is changing.
|===

[.old-materials]
For a textbook-like version of materials similar to these, you may wish to see the link:pass:[https://www.bootstrapworld.org/materials/spring2020/courses/algebra/en-us/units/unit7/index.html][prior unit-based version, window="_blank"]



include::./pathway-glossary.asc[]

[.lesson-section-1]
== Warmup
Students should have their computer, workbook, contracts page, and pencil and be logged in to 
    link:pass:[https://code.pyret.org][code.pyret.org, window="_blank"] 
and have their workbooks with a pen or pencil.

[.lesson-section-1]
== Not Every Function is Smooth %CURRICULUMspan% class="duration"%BEGINCURRICULUMspan%15 minutes%ENDCURRICULUMspan%

[.lesson-section-2]
=== Overview
Students are challenged via counterexamples to see just how far the link:pass:[https://en.wikipedia.org/wiki/Vertical_line_test][Vertical Line Test, window="_blank"] will go: into behaviors that __feel__ like functions but don't act like a straight line or smooth curve!

[.lesson-section-2]
=== Launch

[.lesson-instruction]
Have students stand up and put some space between themselves, as if on a number line (each student essentially represents an "x-coordinate"). Give directions to distinct groups of students. For example:

* If you have brown eyes, wave your arms in the air.
* If you have blue eyes, walk in place.
* If you have green or hazel eyes, flap your arms like a chicken.
* If you like sushi, go back to your seat.

Every student should have an activity to perform.  Ask a student walking in place why they aren't waving their arms in the air, or how they knew what to do. Their behavior is essentially the y-coordinate, though for a more direct connection you can specify that different groups sit, kneel, or stand so that their literal _height_ represents the y-axis.

[.lesson-point]
The Vertical Line Test says that to be a function, every input has to be matched with exactly one output.

[.lesson-instruction]
Ask students: Is this activity representing a function?  What is the input?  What is the output?
_Since each student ("input") has only one action ("output"), it *is still a function*_. 

Up until now, almost all the functions students have seen are continuous and smooth. Make a big deal about this, so they recognize how big of a shift this is!

Explain that students have just acted out what is called a _piecewise function_. Even though their behavior didn't follow a smooth pattern (or even a continuous one!), it clearly followed a set of rules and each input had exactly one output. Math has functions like this as well!

Example: Suppose I sell boxes of candy for $2 each. We could imagine that a graph of sales-v-revenue looks like a straight line with a slope of 2: a linear function! But then I want to offer a "bulk discount", where the price drops to $1 for the 21st box of candy and every box after that. Suddenly our line has a kink in it at 20 boxes, where the slope suddenly changes from 2 to 1. 

Can students come up with their own examples?

[.lesson-section-2]
=== Investigate


Students open the link:pass:[https://code.pyret.org/editor#share=1_TxgoUCDKY3WYn_Vu9J1_2LXkY1o0dx_][Alice's Restaurant starter file, window="_blank"] and turn to link:{pathwayrootdir}pass:[lessons/alg-piecewise-functions/pages/restaurant-intro.html][Welcome to Aliceâ€™s Restaurant! (Page 48), window="_blank"].


Students investigate the file using their workbook page as a guide.

[.notice-box, cols="1", grid="none", stripes="none"]
|===
|
%CURRICULUMspan% class="title"%BEGINCURRICULUMspan%Notice and Wonder%ENDCURRICULUMspan%

Have students take time to think and discuss what they Notice and Wonder about this file, which contains some new elements they haven't seen before!
|===

[.lesson-section-2]
=== Synthesize
- *What are some familiar things you notice in this file?* 
+

_Answers vary: `fun`, `end`, a contract and purpose statement, etc._


- *What new things did you notice in this file?*
+

_Answers vary: the `ask` keyword, the pipe symbols, `otherwise`, the general look of the `order` function, etc._


- *What function is being defined here? What is its contract?*
+
_`order`, takes in a String and produces a Number._
- *How do you think this function works?*
+
_Answers vary - let students drive discussion!_

The `order` function is _also_ piecewise function! Each input has a single output, but the behavior isn't smooth (there's no relationship between one item's price and another!) or continuous (there are plenty of items not on the menu!).

[.strategy-box, cols="1", grid="none", stripes="none"]
|===
|
%CURRICULUMspan% class="title"%BEGINCURRICULUMspan%Partial Functions%ENDCURRICULUMspan%

For Algebra 2 or pre-calculus teachers, this is a useful time to address _partial functions_. The students who liked sushi had _no rule at all_, meaning that the function was _undefined_ at those points. The candy-sales analogy can be extended to say that no one can order more than 100 boxes at a time, making the function undefined for values of x greater than 99.

|===

[.lesson-section-1]
== Defining Piecewise Functions %CURRICULUMspan% class="duration"%BEGINCURRICULUMspan%30 minutes%ENDCURRICULUMspan%

[.lesson-section-2]
=== Overview
Having acted out a piecewise function and examined the code for one on their computers, students take the first step towards writing one, by modifying a function that's already been written for them.

[.lesson-section-2]
=== Launch
Students turn to link:{pathwayrootdir}pass:[lessons/alg-piecewise-functions/pages/restaurant-explore.html][Alice's Restaurant - Explore (Page 49), window="_blank"] and complete the exercises with their partner.  Students should have added as least one extra option to the menu before moving on.

- *Why do you get an error when you try to use the `sales-tax` function for an item not on the menu?*
+
_Let students discuss - move towards the realization that the contract for `order` is `order : String -> Number`, and the "catch-all" branch at the bottom returns a %CURRICULUMspan% class="vocab"%BEGINCURRICULUMspan%String%ENDCURRICULUMspan% instead of a Number._

- *What should we do about this?* 
+
_Since we want the program to stop if we give it an invalid input, we should just delete the last branch altogether. Think about other functions that don't work when we give them an invalid input, like dividing by zero!_

[.lesson-section-2]
=== Investigate
So how do we actually _write_ a piecewise function? And more importantly, how does the Design Recipe help us get there?

The Contract and Purpose Statements don't change: we still write down the name, Domain and Range of our function, and we still write down all the information we need in our Purpose Statement (of course, now we might need to write a lot more, since there's more information!).

The examples are also pretty similar: we write the name of the function, followed by some example inputs, and then we write what the function produces with those inputs.

[.lesson-instruction]
How many examples are needed to fully test this function?

_More than two!_ In fact, we need an example for at least every possible item on the menu!



```
examples:
  order("hamburger")   is 6.00
  order("onion rings") is 3.50
  order("fried tofu")  is 5.25
  order("pie")         is 2.25
end
```


[.lesson-instruction]
Now we circle and label everything that is _change_-able, just as we always have. So what changes?

- The input changes (the String, representing the food being ordered)
- The price changes (the Number, representing the price of the food)

[.strategy-box, cols="1", grid="none", stripes="none"]
|===
|
%CURRICULUMspan% class="title"%BEGINCURRICULUMspan%Pedagogy Note%ENDCURRICULUMspan%

Up until now, there's been a pattern that students may not have noticed: the number of things in the Domain of a function is _always_ equal to the number of labels in the example step, which is _always_ equal to the number of variables in the definition. Make sure you explicitly draw students' attention to this here, and point out that this pattern *no longer holds* when it comes to piecewise functions.
|===

[.lesson-point]
If there are more unique labels in the examples than there are things in the Domain, we're probably looking at a piecewise function.

We have two things changing (the item and the price), but only one thing is in our Domain. That's how we know this function is piecewise function!



We start writing the definition as we normally would, using the function name and the input label from the examples step (`fun order(item): ... end`. But since we know it's a piecewise function, now we add `ask: ... end` to the body of the function.

Then, for each different behavior we wrote in our examples, we add a condition to the body of our `ask` block. Each condition has a test, a `then:`, and a result, and we copy the results from our examples just as we always do.
```
funâ€‹ order(item):
  ask:
    |           ...                  then:â€‹ 6.00
    |           ...                  then:â€‹ 3.50
    |           ...                  then:â€‹ 5.25
    |           ...                  then: 2.25
  end
end
```

Finally, we fill in the tests with an expression that tells us _when_ the function should behave that way. When should `order` return `6.00`? _when the menu item is "hamburger"!_:
```
funâ€‹ order(item):
  ask:
    | string-equal(item, "hamburger") then:â€‹ 6.00
    |           ...                   then:â€‹ 3.50
    |           ...                   then:â€‹ 5.25
    |           ...                   then: 2.25
  end
end
```



[.lesson-section-1]
== Additional Exercises:
- Option 1: Students create another function in the code that displays an image of the food instead of the price. This integrates earlier-learned skills in creating images and defining values.

- Option 2: Students create a _visual representation_ of how the computer moves through a conditional function.

[.acknowledgment]
--
These materials were developed partly through support of the National Science Foundation, 
(awards 1042210, 1535276, 1648684, and 1738598). link:https://www.creativecommons.org/licenses/by-nc-nd/4.0/[image:{pathwayrootdir}../../lib/CCbadge.png[], window="_blank"]
Bootstrap:Algebra by Emmanuel Schanzer, Jen Poole, Ed Campos Jr, Flannery Denny, and Dorai Sitaram
is licensed under a
https://creativecommons.org/licenses/by-nc-nd/4.0/[Creative Commons 4.0 Unported License].
Based on a work at https://www.bootstrapworld.org[www.BootstrapWorld.org].
Permissions beyond the scope of this license may be available by contacting
mailto:schanzer@BootstrapWorld.org[schanzer@BootstrapWorld.org]. 
--
