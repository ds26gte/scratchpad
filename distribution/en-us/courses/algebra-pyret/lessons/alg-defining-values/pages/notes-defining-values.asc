[.pyret]
= Defining Values and Functions

%CURRICULUMspan% class="web-page-only"%BEGINCURRICULUMspan%Referenced from lesson link:{pathwayrootdir}lessons/alg-defining-values/index.shtml[Defining Values]

%ENDCURRICULUMspan%

- We can define values in our program, giving them names that we can refer to later instead of re-typing the same thing over and over. This works the same way it does in math: %CURRICULUMspan% class="gdrive-only"%BEGINCURRICULUMspan%x = 5 + 1%ENDCURRICULUMspan%%CURRICULUMspan% class="begin-ignore-for-gdrive"%BEGINCURRICULUMspan%%ENDCURRICULUMspan%%CURRICULUMSCRIPT%%BEGINCURRICULUMSCRIPT%\displaystyle x = 5 + 1%ENDCURRICULUMSCRIPT%%CURRICULUMspan% class="end-ignore-for-gdrive"%BEGINCURRICULUMspan%%ENDCURRICULUMspan% defines the symbol %CURRICULUMspan% class="gdrive-only"%BEGINCURRICULUMspan%x%ENDCURRICULUMspan%%CURRICULUMspan% class="begin-ignore-for-gdrive"%BEGINCURRICULUMspan%%ENDCURRICULUMspan%%CURRICULUMSCRIPT%%BEGINCURRICULUMSCRIPT%\displaystyle x%ENDCURRICULUMSCRIPT%%CURRICULUMspan% class="end-ignore-for-gdrive"%BEGINCURRICULUMspan%%ENDCURRICULUMspan% to be the number %CURRICULUMspan% class="gdrive-only"%BEGINCURRICULUMspan%6%ENDCURRICULUMspan%%CURRICULUMspan% class="begin-ignore-for-gdrive"%BEGINCURRICULUMspan%%ENDCURRICULUMspan%%CURRICULUMSCRIPT%%BEGINCURRICULUMSCRIPT%\displaystyle 6%ENDCURRICULUMSCRIPT%%CURRICULUMspan% class="end-ignore-for-gdrive"%BEGINCURRICULUMspan%%ENDCURRICULUMspan%. 

- In our language, we can define value by writing %CURRICULUMtt% class="pyret"%BEGINCURRICULUMtt%var x = 5 {plus} 1%ENDCURRICULUMtt%. Here are a few value definitions:


----
x = 5 + 1
y = x * 7
food = "Pizza!"
dot = circle(y, "solid", "red")
----	


- We can also define new  *functions* in our language, to make it do things it didn't do before! To do this, we use a step-by-step process called the *Design Recipe*.

** The first step is to write the  *Contract* for the function you want to build. Remember, a Contract must include the Name, Domain and Range for the function!

** Then we write a *Purpose Statement*, which is a short note that tells us what the function _should do_. Professional programmers work hard to write good purpose statements, so that other people can understand the code they wrote!

** The second step is to write at least two  *Examples*. These are lines of code that show what the function should do for a _specific_ input. Once we see examples of at least two inputs, we can _find a pattern_ and see which parts are changing and which parts aren't.

** Circle the parts that are changing, and label them with a short *variable name* that explains what they do.

** Finally, the third step is to define the function itself! This is pretty easy after you have some examples to work from: we copy everything that didn't change, and replace the changeable stuff with the variable name!

[.acknowledgment]
--
These materials were developed partly through support of the National Science Foundation, 
(awards 1042210, 1535276, 1648684, and 1738598). link:https://www.creativecommons.org/licenses/by-nc-nd/4.0/[image:{pathwayrootdir}../../lib/CCbadge.png[], window="_blank"]
Bootstrap:Algebra by Emmanuel Schanzer, Jen Poole, Ed Campos Jr, Flannery Denny, and Dorai Sitaram
is licensed under a
https://creativecommons.org/licenses/by-nc-nd/4.0/[Creative Commons 4.0 Unported License].
Based on a work at https://www.bootstrapworld.org[www.BootstrapWorld.org].
Permissions beyond the scope of this license may be available by contacting
mailto:schanzer@BootstrapWorld.org[schanzer@BootstrapWorld.org]. 
--
