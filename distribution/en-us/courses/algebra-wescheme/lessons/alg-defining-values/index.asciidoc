= Defining Values

@lesson-description{Students learn how to define lines of code as a set value that can be used repeatedly in different situations, similar to a variable in math.}

[@lesson-intro-table]
|===
@prereqs-stds{alg-function-composition}
| Lesson Goals
| Students will be able to:

* Demonstrate understanding of @vocab{variable}s and why they are useful in math and programming

| Student-facing Goals
|
* I can define a line of code as a @vocab{value}, such as `myStar` or `eyeColor`.
* I can use my defined value in different situations.

| Materials
|
@ifproglang{wescheme}{
* Lesson slides template (@link{https://docs.google.com/presentation/d/1HWf3Fp8K99zC3qtFMQVbg_jhNkFGL0K1CM5n1eWj6p8/, Google Slides})
}

@ifproglang{pyret}{
* Lesson slides template (@link{https://docs.google.com/presentation/d/1X9xZb68iwRI6E8jskUZ8lEfhwqIqKlFTlJGJq6wEAJc/edit?usp=sharing, Google Slides})
}

* Defining Values Exploration (@workbook-link{pages/defining-values-explore.adoc, original}, @link{solution-pages/defining-values-explore.adoc, solutions})

* Defining Values Practice (@workbook-link{defining-values-practice.adoc, original}, @link{solution-pages/defining-values-practice.adoc, solutions})

| Preparation
|
* Make sure all materials have been gathered
* Decide how students will be grouped in pairs

| Supplemental Resources
|

| Key Points For The Facilitator
|
* Learning how to define values is a big milestone! It will be used consistently throughout other lessons, so be sure to give students plenty of time to practice this new skill.
* Check frequently for understanding of @vocab{data types} and @vocab{contract}s during this lesson and throughout subsequent lessons.

* Students will use their Contracts page frequently, so it should be kept in an accessible, convenient location.
|===

[.old-materials]
For a textbook-like version of materials similar to these, you may wish to see the @link{https://www.bootstrapworld.org/materials/spring2020/courses/algebra/en-us/units/unit3/index.html, prior unit-based version}.


== Warmup

Students should be logged into
@ifproglang{wescheme}{ @link{https://www.wescheme.org, WeScheme     }. }
@ifproglang{pyret}{    @link{https://code.pyret.org, code.pyret.org }. }

== What's in Common? @duration{30 minutes}

=== Overview
This activity introduces the problem with duplicate code, leveraging *Mathematical Practice 7 - Identify and Make Use of Structure*. Students identify a common structure in a series of expressions, and discover how to bind that expression to a name that can be re-used.

=== Launch

Take a look at the expressions below:

@ifproglang{wescheme}{

```
(star 50 "solid" "green")
(scale 3 (star 50 "solid" "green"))
(scale .5 (star 50 "solid" "green"))
(rotate 45 (star 50 "solid" "green"))
(rotate 45 (scale 3 (star 50 "solid" "green")))
```

- *What code do they all have in common?*
`(star 50 "solid" "green")`
}

@ifproglang{pyret}{
```
star(50, "solid", "green")
scale(3, star(50, "solid", "green"))
scale(0.5, star(50, "solid", "green"))
rotate(45, star(50, "solid", "green"))
rotate(45, scale(3, star(50, "solid", "green")))
```

- *What code do they all have in common?*
`star(50, "solid", "green")`
}

- *What happened when you were asked to change the color of the star to gold?*
_We had to change it everywhere it appeared._

[.lesson-point]
Duplicate code is almost always bad!

There are lots of potential problems with duplicate code:

- *Readability:* The more code there is, the harder it can be to read.
- *Performance:* Why re-evaluate the same code a dozen times, when we can evaluate it _once_ and use the result as many times as we need?
- *Maintainability:* Suppose we needed to change the size of the stars in the examples above. We would have to make sure every line is changed, which leaves a lot of room for error.

Since we're using that star over and over again, wouldn't it be nice if we could define a "nickname" for that code, and then use the nickname over and over in place of the expression?

=== Investigate

You already know how to do this in math: @math{x = 4 + 2} evaluates the expression, and _defines_ the nickname @math{x} to be the value 6. 

@ifproglang{wescheme}{
WeScheme uses the word "define" to make this even clearer! We can type `(define x (+ 4 2))` to define `x` to be the value 6.
}
@ifproglang{pyret}{
Pyret is no different! We type `x = 4 + 2` to define `x` to be the value 6.
}

[.lesson-instruction]
- Start a new program, and type this code into the Interactions Area. 
- What happens when you hit Enter?
- Can you explain what happened or didn't happen?

[.lesson-point]
Expressions evaluate to answers. Definitions don't.

Think back to math: @math{x = 4 + 2} doesn't have an "answer". All it does is tell us that anytime we see @math{x}, we know it stands for 6. We only see a result when we _use_ that definition, for example @math{x \times 5} will evaluate to 30.

[.lesson-instruction]
On the computer, try using the definition of `x` by multiplying it by 5.

- *What is the usefulness of defining values?*
_Lets the programmer reuse code, saves time, lets the programmer make changes easily, allows us to more easily use elements inside other functions_
- *What datatypes can we define values for?*
_All of them - Number, String, Image_

[.strategy-box, cols="1", grid="none", stripes="none"]
|===
|
@span{.title}{Support for English Language Learners}

MLR 8 - Discussion Supports: As students discuss, rephrase responses as questions and encourage precision in the words being used to reinforce the meanings behind some of the programming-specific language, such as "define" and "value".
|===

Of course, the whole point of defining a value is so that it sticks around and can be used later! That's why programmers put their definitions on the _left-hand side_, known as the @vocab{Definitions Area}.

[.lesson-instruction]
- Complete @workbook-link{pages/defining-values-explore.adoc} in your student workbook. What else can you define?
- Complete @workbook-link{pages/defining-values-practice.adoc} with their partner.

== Cleaning Up Code @duration{20 minutes}

=== Overview
This activity is a chance to _play_ with new concepts, combining value definitions and function composition to create new shapes or to clean up code that generates shapes. The engaging nature of the activity is designed to motivate lots of experiments, each of which gives students a chance to practice applying those concepts.

=== Launch
The ability to define values allows us to look for - and make use of - structure in our code or in our equations. What structure is repeated in this expression? 

@span{.center}{@math{(x + 1)^2 - \frac{4}{(x + 1)} * -2(x + 1)}}

=== Investigate
Have students open
@ifproglang{wescheme}{@link{https://www.wescheme.org/openEditor?publicId=c5SB38KcVD, this file}}
@ifproglang{pyret}{@link{https://code.pyret.org/editor#share=1qUY9u9j_NfZM8PJwT9QKJKNlD3RPbSDE, this file}}
, which draws the Chinese flag. 

. This file uses a function students haven't seen before! What is it? 
. What is it its contract?
. Have them change the color of all the stars from yellow to black
. Have them identify what structure is repeated
. Have them use a value definition to simplify the code
. Have them change the stars from black back to yellow

*Optional* (for a longer time commitment):
Have students choose a flag from this list: @link{pages/flags-of-the-world-resource.pdf, (Flags of the World Resource)}, and recreate one (or more!) of the flags using `define` and any of the other functions they've learned so far.

=== Synthesize
How many reasons can students come up with for why defining values is useful?